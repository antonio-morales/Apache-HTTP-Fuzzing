From e0be82bce715dda77841de3360f6328d26aa35cb Mon Sep 17 00:00:00 2001
From: Antonio Morales <55253029+antonio-morales@users.noreply.github.com>
Date: Mon, 1 Feb 2021 15:47:22 +0100
Subject: [PATCH] Add files via upload

---
 server/config.c      |    8 +-
 server/core.c        |   12 +-
 server/exports.c     | 2405 ++++++++++++++++++++++++++++++++++++++++++
 server/fuzzing_aux.c |  245 +++++
 server/listen.c      |   21 +
 server/log.c         |   10 +-
 server/main.c        |  106 +-
 server/mpm_unix.c    |   16 +-
 server/util.c        |    9 +-
 9 files changed, 2798 insertions(+), 34 deletions(-)
 create mode 100644 server/exports.c
 create mode 100644 server/fuzzing_aux.c

diff --git a/server/config.c b/server/config.c
index 8de2cec945..fceca7275d 100644
--- a/server/config.c
+++ b/server/config.c
@@ -642,11 +642,14 @@ AP_DECLARE(const char *) ap_add_module(module *m, apr_pool_t *p,
         m->name = tmp;
     }
 #endif /*_OSD_POSIX*/
-
+    //MYCHANGE
+    //if(m->module_index != 38)
     ap_add_module_commands(m, p);
     /*  FIXME: is this the right place to call this?
      *  It doesn't appear to be
      */
+    //MYCHANGE
+    //if(m->module_index != 38)
     ap_register_hooks(m, p);
 
     return NULL;
@@ -1329,6 +1332,7 @@ static const char *ap_walk_config_sub(const ap_directive_t *current,
     }
 
     for ( ; ml != NULL; ml = ml->next) {
+
         void *dir_config = ap_set_config_vectors(parms->server,
                                                  section_vector,
                                                  parms->path,
@@ -1382,7 +1386,6 @@ AP_DECLARE(const char *) ap_walk_config(ap_directive_t *current,
             return errmsg;
         }
     }
-
     parms->context = oldconfig;
     return NULL;
 }
@@ -1976,6 +1979,7 @@ AP_DECLARE(int) ap_process_config_tree(server_rec *s,
     parms.limited = -1;
 
     errmsg = ap_walk_config(conftree, &parms, s->lookup_defaults);
+
     if (errmsg) {
         if (parms.err_directive)
             ap_log_perror(APLOG_MARK, APLOG_STARTUP, 0, p, APLOGNO(00526)
diff --git a/server/core.c b/server/core.c
index 8370812d86..690e7df89e 100644
--- a/server/core.c
+++ b/server/core.c
@@ -5621,7 +5621,10 @@ static void core_child_init(apr_pool_t *pchild, server_rec *s)
     /* The MPMs use plain fork() and not apr_proc_fork(), so we have to call
      * apr_random_after_fork() manually in the child
      */
-    proc.pid = getpid();
+    //MYCHANGE
+    //proc.pid = getpid();
+    proc.pid = 106820;
+    //-----------------
     apr_random_after_fork(&proc);
 }
 
@@ -5651,7 +5654,12 @@ AP_CORE_DECLARE(void) ap_init_rng(apr_pool_t *p)
     apr_status_t rv;
     rng = apr_random_standard_new(p);
     do {
-        rv = apr_generate_random_bytes(seed, sizeof(seed));
+    	//MYCHANGE
+        //rv = apr_generate_random_bytes(seed, sizeof(seed));
+    	char constant_seed[] = {0x78,0xAB,0xF5,0xDB,0xE2,0x7F,0xD2,0x8A};
+        memcpy(seed, constant_seed, sizeof(seed));
+        rv = APR_SUCCESS;
+        //-------------------------------------------------
         if (rv != APR_SUCCESS)
             goto error;
         apr_random_add_entropy(rng, seed, sizeof(seed));
diff --git a/server/exports.c b/server/exports.c
new file mode 100644
index 0000000000..43fa4b25a1
--- /dev/null
+++ b/server/exports.c
@@ -0,0 +1,2405 @@
+/*
+ * THIS FILE WAS AUTOGENERATED BY make_exports.awk
+ *
+ * This is an ugly hack that needs to be here, so
+ * that libtool will link all of the APR functions
+ * into server regardless of whether the base server
+ * uses them.
+ */
+
+#include "apache_noprobes.h"
+#include "ap_compat.h"
+#include "ap_config_auto.h"
+#include "ap_config.h"
+#include "ap_config_layout.h"
+#include "ap_expr.h"
+#include "ap_hooks.h"
+#include "ap_listen.h"
+#include "ap_mmn.h"
+#include "ap_mpm.h"
+#include "ap_provider.h"
+#include "ap_regex.h"
+#include "ap_regkey.h"
+#include "ap_release.h"
+#include "apreq_cookie.h"
+#include "apreq_error.h"
+#include "apreq.h"
+#include "apreq_module.h"
+#include "apreq_param.h"
+#include "apreq_parser.h"
+#include "apreq_util.h"
+#include "ap_slotmem.h"
+#include "ap_socache.h"
+#include "fuzzing_aux.h"
+#include "heartbeat.h"
+#include "http_config.h"
+#include "http_connection.h"
+#include "http_core.h"
+#include "httpd.h"
+#include "http_log.h"
+#include "http_main.h"
+#include "http_protocol.h"
+#include "http_request.h"
+#include "http_vhost.h"
+#include "mod_auth.h"
+#include "mod_core.h"
+#include "mod_request.h"
+#include "mpm_common.h"
+#include "scoreboard.h"
+#include "util_cfgtree.h"
+#include "util_charset.h"
+#include "util_cookies.h"
+#include "util_ebcdic.h"
+#include "util_fcgi.h"
+#include "util_filter.h"
+#include "util_ldap.h"
+#include "util_md5.h"
+#include "util_mutex.h"
+#include "util_script.h"
+#include "util_time.h"
+#include "util_varbuf.h"
+#include "util_xml.h"
+#include "os.h"
+#include "unixd.h"
+#include "core.h"
+#include "mpm_fdqueue.h"
+#include "apr_allocator.h"
+#include "apr_anylock.h"
+#include "apr_atomic.h"
+#include "apr_base64.h"
+#include "apr_buckets.h"
+#include "apr_crypto.h"
+#include "apr_cstr.h"
+#include "apr_date.h"
+#include "apr_dbd.h"
+#include "apr_dbm.h"
+#include "apr_dso.h"
+#include "apr_encode.h"
+#include "apr_env.h"
+#include "apr_errno.h"
+#include "apr_escape.h"
+#include "apr_file_info.h"
+#include "apr_file_io.h"
+#include "apr_fnmatch.h"
+#include "apr_general.h"
+#include "apr_getopt.h"
+#include "apr_global_mutex.h"
+#include "apr.h"
+#include "apr_hash.h"
+#include "apr_hooks.h"
+#include "apr_inherit.h"
+#include "apr_jose.h"
+#include "apr_json.h"
+#include "apr_lib.h"
+#include "apr_md4.h"
+#include "apr_md5.h"
+#include "apr_memcache.h"
+#include "apr_mmap.h"
+#include "apr_network_io.h"
+#include "apr_optional.h"
+#include "apr_optional_hooks.h"
+#include "apr_perms_set.h"
+#include "apr_poll.h"
+#include "apr_pools.h"
+#include "apr_portable.h"
+#include "apr_proc_mutex.h"
+#include "apr_queue.h"
+#include "apr_random.h"
+#include "apr_redis.h"
+#include "apr_reslist.h"
+#include "apr_ring.h"
+#include "apr_rmm.h"
+#include "apr_sdbm.h"
+#include "apr_sha1.h"
+#include "apr_shm.h"
+#include "apr_signal.h"
+#include "apr_siphash.h"
+#include "apr_skiplist.h"
+#include "apr_strings.h"
+#include "apr_strmatch.h"
+#include "apr_tables.h"
+#include "apr_thread_cond.h"
+#include "apr_thread_mutex.h"
+#include "apr_thread_pool.h"
+#include "apr_thread_proc.h"
+#include "apr_thread_rwlock.h"
+#include "apr_time.h"
+#include "apr_uri.h"
+#include "apr_user.h"
+#include "apr_uuid.h"
+#include "apr_version.h"
+#include "apr_want.h"
+#include "apr_xlate.h"
+#include "apr_xml.h"
+#include "apu_errno.h"
+#include "apu.h"
+#include "apu_version.h"
+#include "apu_want.h"
+
+const void *ap_ugly_hack = NULL;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/include/ap_expr.h
+ */
+const void *ap_hack_ap_expr_exec = (const void *)ap_expr_exec;
+const void *ap_hack_ap_expr_exec_re = (const void *)ap_expr_exec_re;
+const void *ap_hack_ap_expr_exec_ctx = (const void *)ap_expr_exec_ctx;
+const void *ap_hack_ap_expr_str_exec = (const void *)ap_expr_str_exec;
+const void *ap_hack_ap_expr_str_exec_re = (const void *)ap_expr_str_exec_re;
+const void *ap_hack_ap_expr_lookup_default = (const void *)ap_expr_lookup_default;
+const void *ap_hack_ap_hook_expr_lookup = (const void *)ap_hook_expr_lookup;
+const void *ap_hack_ap_hook_get_expr_lookup = (const void *)ap_hook_get_expr_lookup;
+const void *ap_hack_ap_run_expr_lookup = (const void *)ap_run_expr_lookup;
+const void *ap_hack_ap_expr_parse = (const void *)ap_expr_parse;
+const void *ap_hack_ap_expr_parse_cmd_mi = (const void *)ap_expr_parse_cmd_mi;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/include/ap_listen.h
+ */
+const void *ap_hack_ap_accept_error_is_nonfatal = (const void *)ap_accept_error_is_nonfatal;
+const void *ap_hack_ap_listen_pre_config = (const void *)ap_listen_pre_config;
+const void *ap_hack_ap_setup_listeners = (const void *)ap_setup_listeners;
+const void *ap_hack_ap_duplicate_listeners = (const void *)ap_duplicate_listeners;
+const void *ap_hack_ap_close_listeners = (const void *)ap_close_listeners;
+const void *ap_hack_ap_close_listeners_ex = (const void *)ap_close_listeners_ex;
+const void *ap_hack_ap_close_selected_listeners = (const void *)ap_close_selected_listeners;
+const void *ap_hack_ap_set_listenbacklog = (const void *)ap_set_listenbacklog;
+const void *ap_hack_ap_set_listencbratio = (const void *)ap_set_listencbratio;
+const void *ap_hack_ap_set_listener = (const void *)ap_set_listener;
+const void *ap_hack_ap_set_send_buffer_size = (const void *)ap_set_send_buffer_size;
+const void *ap_hack_ap_set_receive_buffer_size = (const void *)ap_set_receive_buffer_size;
+const void *ap_hack_ap_set_accept_errors_nonfatal = (const void *)ap_set_accept_errors_nonfatal;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/include/ap_mpm.h
+ */
+const void *ap_hack_ap_hook_mpm = (const void *)ap_hook_mpm;
+const void *ap_hack_ap_hook_get_mpm = (const void *)ap_hook_get_mpm;
+const void *ap_hack_ap_run_mpm = (const void *)ap_run_mpm;
+const void *ap_hack_ap_os_create_privileged_process = (const void *)ap_os_create_privileged_process;
+const void *ap_hack_ap_mpm_query = (const void *)ap_mpm_query;
+const void *ap_hack_ap_mpm_resume_suspended = (const void *)ap_mpm_resume_suspended;
+const void *ap_hack_ap_mpm_register_timed_callback = (const void *)ap_mpm_register_timed_callback;
+const void *ap_hack_ap_mpm_register_poll_callback = (const void *)ap_mpm_register_poll_callback;
+const void *ap_hack_ap_mpm_register_poll_callback_timeout = (const void *)ap_mpm_register_poll_callback_timeout;
+const void *ap_hack_ap_hook_child_status = (const void *)ap_hook_child_status;
+const void *ap_hack_ap_hook_get_child_status = (const void *)ap_hook_get_child_status;
+const void *ap_hack_ap_run_child_status = (const void *)ap_run_child_status;
+const void *ap_hack_ap_hook_end_generation = (const void *)ap_hook_end_generation;
+const void *ap_hack_ap_hook_get_end_generation = (const void *)ap_hook_get_end_generation;
+const void *ap_hack_ap_run_end_generation = (const void *)ap_run_end_generation;
+#ifdef AP_ENABLE_EXCEPTION_HOOK
+const void *ap_hack_ap_hook_fatal_exception = (const void *)ap_hook_fatal_exception;
+const void *ap_hack_ap_hook_get_fatal_exception = (const void *)ap_hook_get_fatal_exception;
+const void *ap_hack_ap_run_fatal_exception = (const void *)ap_run_fatal_exception;
+#endif /*AP_ENABLE_EXCEPTION_HOOK*/
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/include/ap_provider.h
+ */
+const void *ap_hack_ap_register_provider = (const void *)ap_register_provider;
+const void *ap_hack_ap_lookup_provider = (const void *)ap_lookup_provider;
+const void *ap_hack_ap_list_provider_names = (const void *)ap_list_provider_names;
+const void *ap_hack_ap_list_provider_groups = (const void *)ap_list_provider_groups;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/include/ap_regex.h
+ */
+const void *ap_hack_ap_pcre_version_string = (const void *)ap_pcre_version_string;
+const void *ap_hack_ap_regcomp_get_default_cflags = (const void *)ap_regcomp_get_default_cflags;
+const void *ap_hack_ap_regcomp_set_default_cflags = (const void *)ap_regcomp_set_default_cflags;
+const void *ap_hack_ap_regcomp_default_cflag_by_name = (const void *)ap_regcomp_default_cflag_by_name;
+const void *ap_hack_ap_regcomp = (const void *)ap_regcomp;
+const void *ap_hack_ap_regexec = (const void *)ap_regexec;
+const void *ap_hack_ap_regexec_len = (const void *)ap_regexec_len;
+const void *ap_hack_ap_regerror = (const void *)ap_regerror;
+const void *ap_hack_ap_regname = (const void *)ap_regname;
+const void *ap_hack_ap_regfree = (const void *)ap_regfree;
+const void *ap_hack_ap_rxplus_compile = (const void *)ap_rxplus_compile;
+const void *ap_hack_ap_rxplus_exec = (const void *)ap_rxplus_exec;
+#ifdef DOXYGEN
+const void *ap_hack_ap_rxplus_nmatch = (const void *)ap_rxplus_nmatch;
+#else
+#endif
+const void *ap_hack_ap_rxplus_match = (const void *)ap_rxplus_match;
+const void *ap_hack_ap_rxplus_pmatch = (const void *)ap_rxplus_pmatch;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/include/ap_regkey.h
+ */
+#if defined(WIN32) || defined(DOXYGEN)
+const void *ap_hack_ap_regkey_const = (const void *)ap_regkey_const;
+const void *ap_hack_ap_regkey_open = (const void *)ap_regkey_open;
+const void *ap_hack_ap_regkey_close = (const void *)ap_regkey_close;
+const void *ap_hack_ap_regkey_remove = (const void *)ap_regkey_remove;
+const void *ap_hack_ap_regkey_value_get = (const void *)ap_regkey_value_get;
+const void *ap_hack_ap_regkey_value_set = (const void *)ap_regkey_value_set;
+const void *ap_hack_ap_regkey_value_raw_get = (const void *)ap_regkey_value_raw_get;
+const void *ap_hack_ap_regkey_value_raw_set = (const void *)ap_regkey_value_raw_set;
+const void *ap_hack_ap_regkey_value_array_get = (const void *)ap_regkey_value_array_get;
+const void *ap_hack_ap_regkey_value_array_set = (const void *)ap_regkey_value_array_set;
+const void *ap_hack_ap_regkey_value_remove = (const void *)ap_regkey_value_remove;
+#endif /* def WIN32 || def DOXYGEN */
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/include/apreq_cookie.h
+ */
+const void *ap_hack_apreq_parse_cookie_header = (const void *)apreq_parse_cookie_header;
+const void *ap_hack_apreq_cookie_make = (const void *)apreq_cookie_make;
+const void *ap_hack_apreq_cookie_as_string = (const void *)apreq_cookie_as_string;
+const void *ap_hack_apreq_cookie_serialize = (const void *)apreq_cookie_serialize;
+const void *ap_hack_apreq_cookie_expires = (const void *)apreq_cookie_expires;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/include/apreq_error.h
+ */
+const void *ap_hack_apreq_strerror = (const void *)apreq_strerror;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/include/apreq.h
+ */
+const void *ap_hack_apreq_initialize = (const void *)apreq_initialize;
+const void *ap_hack_apreq_pre_initialize = (const void *)apreq_pre_initialize;
+const void *ap_hack_apreq_post_initialize = (const void *)apreq_post_initialize;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/include/apreq_module.h
+ */
+const void *ap_hack_apreq_handle_cgi = (const void *)apreq_handle_cgi;
+const void *ap_hack_apreq_handle_custom = (const void *)apreq_handle_custom;
+const void *ap_hack_apreq_param = (const void *)apreq_param;
+const void *ap_hack_apreq_params = (const void *)apreq_params;
+const void *ap_hack_apreq_cookies = (const void *)apreq_cookies;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/include/apreq_param.h
+ */
+const void *ap_hack_apreq_param_make = (const void *)apreq_param_make;
+const void *ap_hack_apreq_param_decode = (const void *)apreq_param_decode;
+const void *ap_hack_apreq_param_encode = (const void *)apreq_param_encode;
+const void *ap_hack_apreq_parse_query_string = (const void *)apreq_parse_query_string;
+const void *ap_hack_apreq_params_as_array = (const void *)apreq_params_as_array;
+const void *ap_hack_apreq_params_as_string = (const void *)apreq_params_as_string;
+const void *ap_hack_apreq_uploads = (const void *)apreq_uploads;
+const void *ap_hack_apreq_upload = (const void *)apreq_upload;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/include/apreq_parser.h
+ */
+const void *ap_hack_apreq_parser_make = (const void *)apreq_parser_make;
+const void *ap_hack_apreq_hook_make = (const void *)apreq_hook_make;
+const void *ap_hack_apreq_parser_add_hook = (const void *)apreq_parser_add_hook;
+const void *ap_hack_apreq_parser = (const void *)apreq_parser;
+const void *ap_hack_apreq_register_parser = (const void *)apreq_register_parser;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/include/apreq_util.h
+ */
+const void *ap_hack_apreq_join = (const void *)apreq_join;
+const void *ap_hack_apreq_index = (const void *)apreq_index;
+const void *ap_hack_apreq_quote = (const void *)apreq_quote;
+const void *ap_hack_apreq_quote_once = (const void *)apreq_quote_once;
+const void *ap_hack_apreq_encode = (const void *)apreq_encode;
+const void *ap_hack_apreq_cp1252_to_utf8 = (const void *)apreq_cp1252_to_utf8;
+const void *ap_hack_apreq_charset_divine = (const void *)apreq_charset_divine;
+const void *ap_hack_apreq_decode = (const void *)apreq_decode;
+const void *ap_hack_apreq_decodev = (const void *)apreq_decodev;
+const void *ap_hack_apreq_atoi64f = (const void *)apreq_atoi64f;
+const void *ap_hack_apreq_atoi64t = (const void *)apreq_atoi64t;
+const void *ap_hack_apreq_brigade_fwrite = (const void *)apreq_brigade_fwrite;
+const void *ap_hack_apreq_file_mktemp = (const void *)apreq_file_mktemp;
+const void *ap_hack_apreq_header_attribute = (const void *)apreq_header_attribute;
+const void *ap_hack_apreq_brigade_concat = (const void *)apreq_brigade_concat;
+const void *ap_hack_apreq_brigade_spoolfile = (const void *)apreq_brigade_spoolfile;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/include/http_config.h
+ */
+const void *ap_hack_ap_get_module_config = (const void *)ap_get_module_config;
+const void *ap_hack_ap_set_module_config = (const void *)ap_set_module_config;
+const void *ap_hack_ap_get_module_flags = (const void *)ap_get_module_flags;
+const void *ap_hack_ap_get_server_module_loglevel = (const void *)ap_get_server_module_loglevel;
+const void *ap_hack_ap_get_conn_module_loglevel = (const void *)ap_get_conn_module_loglevel;
+const void *ap_hack_ap_get_conn_server_module_loglevel = (const void *)ap_get_conn_server_module_loglevel;
+const void *ap_hack_ap_get_request_module_loglevel = (const void *)ap_get_request_module_loglevel;
+const void *ap_hack_ap_set_module_loglevel = (const void *)ap_set_module_loglevel;
+const void *ap_hack_ap_reset_module_loglevels = (const void *)ap_reset_module_loglevels;
+const void *ap_hack_ap_set_string_slot = (const void *)ap_set_string_slot;
+const void *ap_hack_ap_set_int_slot = (const void *)ap_set_int_slot;
+const void *ap_hack_ap_parse_log_level = (const void *)ap_parse_log_level;
+const void *ap_hack_ap_method_is_limited = (const void *)ap_method_is_limited;
+const void *ap_hack_ap_set_string_slot_lower = (const void *)ap_set_string_slot_lower;
+const void *ap_hack_ap_set_flag_slot = (const void *)ap_set_flag_slot;
+const void *ap_hack_ap_set_flag_slot_char = (const void *)ap_set_flag_slot_char;
+const void *ap_hack_ap_set_file_slot = (const void *)ap_set_file_slot;
+const void *ap_hack_ap_set_deprecated = (const void *)ap_set_deprecated;
+const void *ap_hack_ap_server_root_relative = (const void *)ap_server_root_relative;
+const void *ap_hack_ap_runtime_dir_relative = (const void *)ap_runtime_dir_relative;
+const void *ap_hack_ap_state_dir_relative = (const void *)ap_state_dir_relative;
+const void *ap_hack_ap_add_module = (const void *)ap_add_module;
+const void *ap_hack_ap_remove_module = (const void *)ap_remove_module;
+const void *ap_hack_ap_add_loaded_module = (const void *)ap_add_loaded_module;
+const void *ap_hack_ap_remove_loaded_module = (const void *)ap_remove_loaded_module;
+const void *ap_hack_ap_find_module_name = (const void *)ap_find_module_name;
+const void *ap_hack_ap_find_module_short_name = (const void *)ap_find_module_short_name;
+const void *ap_hack_ap_find_linked_module = (const void *)ap_find_linked_module;
+const void *ap_hack_ap_pcfg_openfile = (const void *)ap_pcfg_openfile;
+const void *ap_hack_ap_pcfg_open_custom = (const void *)ap_pcfg_open_custom;
+const void *ap_hack_ap_cfg_getline = (const void *)ap_cfg_getline;
+const void *ap_hack_ap_cfg_getc = (const void *)ap_cfg_getc;
+const void *ap_hack_ap_cfg_closefile = (const void *)ap_cfg_closefile;
+const void *ap_hack_ap_pcfg_strerror = (const void *)ap_pcfg_strerror;
+const void *ap_hack_ap_soak_end_container = (const void *)ap_soak_end_container;
+const void *ap_hack_ap_build_cont_config = (const void *)ap_build_cont_config;
+const void *ap_hack_ap_build_config = (const void *)ap_build_config;
+const void *ap_hack_ap_walk_config = (const void *)ap_walk_config;
+const void *ap_hack_ap_dir_cfgmatch = (const void *)ap_dir_cfgmatch;
+const void *ap_hack_ap_check_cmd_context = (const void *)ap_check_cmd_context;
+const void *ap_hack_ap_single_module_configure = (const void *)ap_single_module_configure;
+const void *ap_hack_ap_setup_prelinked_modules = (const void *)ap_setup_prelinked_modules;
+const void *ap_hack_ap_show_directives = (const void *)ap_show_directives;
+const void *ap_hack_ap_exists_directive = (const void *)ap_exists_directive;
+const void *ap_hack_ap_show_modules = (const void *)ap_show_modules;
+const void *ap_hack_ap_show_mpm = (const void *)ap_show_mpm;
+const void *ap_hack_ap_read_config = (const void *)ap_read_config;
+const void *ap_hack_ap_run_rewrite_args = (const void *)ap_run_rewrite_args;
+const void *ap_hack_ap_register_hooks = (const void *)ap_register_hooks;
+const void *ap_hack_ap_fixup_virtual_hosts = (const void *)ap_fixup_virtual_hosts;
+const void *ap_hack_ap_reserve_module_slots = (const void *)ap_reserve_module_slots;
+const void *ap_hack_ap_reserve_module_slots_directive = (const void *)ap_reserve_module_slots_directive;
+const void *ap_hack_ap_create_request_config = (const void *)ap_create_request_config;
+const void *ap_hack_ap_create_per_dir_config = (const void *)ap_create_per_dir_config;
+const void *ap_hack_ap_merge_per_dir_configs = (const void *)ap_merge_per_dir_configs;
+const void *ap_hack_ap_new_log_config = (const void *)ap_new_log_config;
+const void *ap_hack_ap_merge_log_config = (const void *)ap_merge_log_config;
+const void *ap_hack_ap_create_conn_config = (const void *)ap_create_conn_config;
+const void *ap_hack_ap_parse_htaccess = (const void *)ap_parse_htaccess;
+const void *ap_hack_ap_init_virtual_host = (const void *)ap_init_virtual_host;
+const void *ap_hack_ap_process_resource_config = (const void *)ap_process_resource_config;
+const void *ap_hack_ap_process_fnmatch_configs = (const void *)ap_process_fnmatch_configs;
+const void *ap_hack_ap_process_config_tree = (const void *)ap_process_config_tree;
+const void *ap_hack_ap_retained_data_create = (const void *)ap_retained_data_create;
+const void *ap_hack_ap_retained_data_get = (const void *)ap_retained_data_get;
+const void *ap_hack_ap_invoke_handler = (const void *)ap_invoke_handler;
+const void *ap_hack_ap_find_command = (const void *)ap_find_command;
+const void *ap_hack_ap_find_command_in_modules = (const void *)ap_find_command_in_modules;
+const void *ap_hack_ap_set_config_vectors = (const void *)ap_set_config_vectors;
+const void *ap_hack_ap_hook_header_parser = (const void *)ap_hook_header_parser;
+const void *ap_hack_ap_hook_get_header_parser = (const void *)ap_hook_get_header_parser;
+const void *ap_hack_ap_run_header_parser = (const void *)ap_run_header_parser;
+const void *ap_hack_ap_hook_pre_config = (const void *)ap_hook_pre_config;
+const void *ap_hack_ap_hook_get_pre_config = (const void *)ap_hook_get_pre_config;
+const void *ap_hack_ap_run_pre_config = (const void *)ap_run_pre_config;
+const void *ap_hack_ap_hook_check_config = (const void *)ap_hook_check_config;
+const void *ap_hack_ap_hook_get_check_config = (const void *)ap_hook_get_check_config;
+const void *ap_hack_ap_run_check_config = (const void *)ap_run_check_config;
+const void *ap_hack_ap_hook_test_config = (const void *)ap_hook_test_config;
+const void *ap_hack_ap_hook_get_test_config = (const void *)ap_hook_get_test_config;
+const void *ap_hack_ap_run_test_config = (const void *)ap_run_test_config;
+const void *ap_hack_ap_hook_post_config = (const void *)ap_hook_post_config;
+const void *ap_hack_ap_hook_get_post_config = (const void *)ap_hook_get_post_config;
+const void *ap_hack_ap_run_post_config = (const void *)ap_run_post_config;
+const void *ap_hack_ap_hook_open_logs = (const void *)ap_hook_open_logs;
+const void *ap_hack_ap_hook_get_open_logs = (const void *)ap_hook_get_open_logs;
+const void *ap_hack_ap_run_open_logs = (const void *)ap_run_open_logs;
+const void *ap_hack_ap_hook_child_init = (const void *)ap_hook_child_init;
+const void *ap_hack_ap_hook_get_child_init = (const void *)ap_hook_get_child_init;
+const void *ap_hack_ap_run_child_init = (const void *)ap_run_child_init;
+const void *ap_hack_ap_hook_handler = (const void *)ap_hook_handler;
+const void *ap_hack_ap_hook_get_handler = (const void *)ap_hook_get_handler;
+const void *ap_hack_ap_run_handler = (const void *)ap_run_handler;
+const void *ap_hack_ap_hook_quick_handler = (const void *)ap_hook_quick_handler;
+const void *ap_hack_ap_hook_get_quick_handler = (const void *)ap_hook_get_quick_handler;
+const void *ap_hack_ap_run_quick_handler = (const void *)ap_run_quick_handler;
+const void *ap_hack_ap_hook_optional_fn_retrieve = (const void *)ap_hook_optional_fn_retrieve;
+const void *ap_hack_ap_hook_get_optional_fn_retrieve = (const void *)ap_hook_get_optional_fn_retrieve;
+const void *ap_hack_ap_run_optional_fn_retrieve = (const void *)ap_run_optional_fn_retrieve;
+const void *ap_hack_ap_hook_open_htaccess = (const void *)ap_hook_open_htaccess;
+const void *ap_hack_ap_hook_get_open_htaccess = (const void *)ap_hook_get_open_htaccess;
+const void *ap_hack_ap_run_open_htaccess = (const void *)ap_run_open_htaccess;
+const void *ap_hack_ap_pool_cleanup_set_null = (const void *)ap_pool_cleanup_set_null;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/include/http_connection.h
+ */
+const void *ap_hack_ap_process_connection = (const void *)ap_process_connection;
+const void *ap_hack_ap_shutdown_conn = (const void *)ap_shutdown_conn;
+const void *ap_hack_ap_flush_conn = (const void *)ap_flush_conn;
+const void *ap_hack_ap_lingering_close = (const void *)ap_lingering_close;
+const void *ap_hack_ap_prep_lingering_close = (const void *)ap_prep_lingering_close;
+const void *ap_hack_ap_start_lingering_close = (const void *)ap_start_lingering_close;
+const void *ap_hack_ap_hook_create_connection = (const void *)ap_hook_create_connection;
+const void *ap_hack_ap_hook_get_create_connection = (const void *)ap_hook_get_create_connection;
+const void *ap_hack_ap_run_create_connection = (const void *)ap_run_create_connection;
+const void *ap_hack_ap_hook_pre_connection = (const void *)ap_hook_pre_connection;
+const void *ap_hack_ap_hook_get_pre_connection = (const void *)ap_hook_get_pre_connection;
+const void *ap_hack_ap_run_pre_connection = (const void *)ap_run_pre_connection;
+const void *ap_hack_ap_hook_process_connection = (const void *)ap_hook_process_connection;
+const void *ap_hack_ap_hook_get_process_connection = (const void *)ap_hook_get_process_connection;
+const void *ap_hack_ap_run_process_connection = (const void *)ap_run_process_connection;
+const void *ap_hack_ap_hook_pre_close_connection = (const void *)ap_hook_pre_close_connection;
+const void *ap_hack_ap_hook_get_pre_close_connection = (const void *)ap_hook_get_pre_close_connection;
+const void *ap_hack_ap_run_pre_close_connection = (const void *)ap_run_pre_close_connection;
+const void *ap_hack_ap_bucket_eoc_make = (const void *)ap_bucket_eoc_make;
+const void *ap_hack_ap_bucket_eoc_create = (const void *)ap_bucket_eoc_create;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/include/http_core.h
+ */
+const void *ap_hack_ap_allow_options = (const void *)ap_allow_options;
+const void *ap_hack_ap_allow_overrides = (const void *)ap_allow_overrides;
+const void *ap_hack_ap_document_root = (const void *)ap_document_root;
+const void *ap_hack_ap_get_useragent_host = (const void *)ap_get_useragent_host;
+const void *ap_hack_ap_get_remote_host = (const void *)ap_get_remote_host;
+const void *ap_hack_ap_get_remote_logname = (const void *)ap_get_remote_logname;
+const void *ap_hack_ap_construct_url = (const void *)ap_construct_url;
+const void *ap_hack_ap_get_server_name = (const void *)ap_get_server_name;
+const void *ap_hack_ap_get_server_name_for_url = (const void *)ap_get_server_name_for_url;
+const void *ap_hack_ap_get_server_port = (const void *)ap_get_server_port;
+const void *ap_hack_ap_get_read_buf_size = (const void *)ap_get_read_buf_size;
+const void *ap_hack_ap_get_limit_req_body = (const void *)ap_get_limit_req_body;
+const void *ap_hack_ap_get_limit_xml_body = (const void *)ap_get_limit_xml_body;
+const void *ap_hack_ap_custom_response = (const void *)ap_custom_response;
+const void *ap_hack_ap_is_recursion_limit_exceeded = (const void *)ap_is_recursion_limit_exceeded;
+const void *ap_hack_ap_exists_config_define = (const void *)ap_exists_config_define;
+const void *ap_hack_ap_core_translate = (const void *)ap_core_translate;
+const void *ap_hack_ap_auth_type = (const void *)ap_auth_type;
+const void *ap_hack_ap_auth_name = (const void *)ap_auth_name;
+const void *ap_hack_ap_satisfies = (const void *)ap_satisfies;
+const void *ap_hack_ap_get_core_module_config = (const void *)ap_get_core_module_config;
+const void *ap_hack_ap_set_core_module_config = (const void *)ap_set_core_module_config;
+const void *ap_hack_ap_get_conn_socket = (const void *)ap_get_conn_socket;
+const void *ap_hack_ap_register_request_note = (const void *)ap_register_request_note;
+const void *ap_hack_ap_get_request_note = (const void *)ap_get_request_note;
+const void *ap_hack_ap_add_per_dir_conf = (const void *)ap_add_per_dir_conf;
+const void *ap_hack_ap_add_per_url_conf = (const void *)ap_add_per_url_conf;
+const void *ap_hack_ap_add_file_conf = (const void *)ap_add_file_conf;
+const void *ap_hack_ap_add_if_conf = (const void *)ap_add_if_conf;
+const void *ap_hack_ap_limit_section = (const void *)ap_limit_section;
+const void *ap_hack_ap_get_server_protocol = (const void *)ap_get_server_protocol;
+const void *ap_hack_ap_set_server_protocol = (const void *)ap_set_server_protocol;
+const void *ap_hack_ap_hook_insert_network_bucket = (const void *)ap_hook_insert_network_bucket;
+const void *ap_hack_ap_hook_get_insert_network_bucket = (const void *)ap_hook_get_insert_network_bucket;
+const void *ap_hack_ap_run_insert_network_bucket = (const void *)ap_run_insert_network_bucket;
+const void *ap_hack_ap_hook_get_mgmt_items = (const void *)ap_hook_get_mgmt_items;
+const void *ap_hack_ap_hook_get_get_mgmt_items = (const void *)ap_hook_get_get_mgmt_items;
+const void *ap_hack_ap_run_get_mgmt_items = (const void *)ap_run_get_mgmt_items;
+const void *ap_hack_ap_register_errorlog_handler = (const void *)ap_register_errorlog_handler;
+const void *ap_hack_ap_hook_error_log = (const void *)ap_hook_error_log;
+const void *ap_hack_ap_hook_get_error_log = (const void *)ap_hook_get_error_log;
+const void *ap_hack_ap_run_error_log = (const void *)ap_run_error_log;
+const void *ap_hack_ap_register_log_hooks = (const void *)ap_register_log_hooks;
+const void *ap_hack_ap_register_config_hooks = (const void *)ap_register_config_hooks;
+const void *ap_hack_ap_state_query = (const void *)ap_state_query;
+const void *ap_hack_ap_create_slave_connection = (const void *)ap_create_slave_connection;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/include/httpd.h
+ */
+const void *ap_hack_ap_get_server_revision = (const void *)ap_get_server_revision;
+const void *ap_hack_ap_get_server_banner = (const void *)ap_get_server_banner;
+const void *ap_hack_ap_get_server_description = (const void *)ap_get_server_description;
+const void *ap_hack_ap_add_version_component = (const void *)ap_add_version_component;
+const void *ap_hack_ap_get_server_built = (const void *)ap_get_server_built;
+const void *ap_hack_ap_context_document_root = (const void *)ap_context_document_root;
+const void *ap_hack_ap_context_prefix = (const void *)ap_context_prefix;
+const void *ap_hack_ap_set_context_info = (const void *)ap_set_context_info;
+const void *ap_hack_ap_set_document_root = (const void *)ap_set_document_root;
+const void *ap_hack_ap_field_noparam = (const void *)ap_field_noparam;
+const void *ap_hack_ap_ht_time = (const void *)ap_ht_time;
+const void *ap_hack_ap_getword = (const void *)ap_getword;
+const void *ap_hack_ap_getword_nc = (const void *)ap_getword_nc;
+const void *ap_hack_ap_getword_white = (const void *)ap_getword_white;
+const void *ap_hack_ap_getword_white_nc = (const void *)ap_getword_white_nc;
+const void *ap_hack_ap_getword_nulls = (const void *)ap_getword_nulls;
+const void *ap_hack_ap_getword_nulls_nc = (const void *)ap_getword_nulls_nc;
+const void *ap_hack_ap_getword_conf = (const void *)ap_getword_conf;
+const void *ap_hack_ap_getword_conf_nc = (const void *)ap_getword_conf_nc;
+const void *ap_hack_ap_getword_conf2 = (const void *)ap_getword_conf2;
+const void *ap_hack_ap_getword_conf2_nc = (const void *)ap_getword_conf2_nc;
+const void *ap_hack_ap_resolve_env = (const void *)ap_resolve_env;
+const void *ap_hack_ap_size_list_item = (const void *)ap_size_list_item;
+const void *ap_hack_ap_get_list_item = (const void *)ap_get_list_item;
+const void *ap_hack_ap_find_list_item = (const void *)ap_find_list_item;
+const void *ap_hack_ap_find_etag_weak = (const void *)ap_find_etag_weak;
+const void *ap_hack_ap_find_etag_strong = (const void *)ap_find_etag_strong;
+const void *ap_hack_ap_scan_http_field_content = (const void *)ap_scan_http_field_content;
+const void *ap_hack_ap_scan_http_token = (const void *)ap_scan_http_token;
+const void *ap_hack_ap_scan_vchar_obstext = (const void *)ap_scan_vchar_obstext;
+const void *ap_hack_ap_parse_token_list_strict = (const void *)ap_parse_token_list_strict;
+const void *ap_hack_ap_get_token = (const void *)ap_get_token;
+const void *ap_hack_ap_find_token = (const void *)ap_find_token;
+const void *ap_hack_ap_find_last_token = (const void *)ap_find_last_token;
+const void *ap_hack_ap_is_url = (const void *)ap_is_url;
+const void *ap_hack_ap_unescape_all = (const void *)ap_unescape_all;
+const void *ap_hack_ap_unescape_url = (const void *)ap_unescape_url;
+const void *ap_hack_ap_unescape_url_keep2f = (const void *)ap_unescape_url_keep2f;
+const void *ap_hack_ap_unescape_urlencoded = (const void *)ap_unescape_urlencoded;
+const void *ap_hack_ap_no2slash = (const void *)ap_no2slash;
+const void *ap_hack_ap_no2slash_ex = (const void *)ap_no2slash_ex;
+const void *ap_hack_ap_normalize_path = (const void *)ap_normalize_path;
+const void *ap_hack_ap_getparents = (const void *)ap_getparents;
+const void *ap_hack_ap_escape_path_segment = (const void *)ap_escape_path_segment;
+const void *ap_hack_ap_escape_path_segment_buffer = (const void *)ap_escape_path_segment_buffer;
+const void *ap_hack_ap_os_escape_path = (const void *)ap_os_escape_path;
+const void *ap_hack_ap_escape_urlencoded = (const void *)ap_escape_urlencoded;
+const void *ap_hack_ap_escape_urlencoded_buffer = (const void *)ap_escape_urlencoded_buffer;
+const void *ap_hack_ap_escape_html2 = (const void *)ap_escape_html2;
+const void *ap_hack_ap_escape_logitem = (const void *)ap_escape_logitem;
+const void *ap_hack_ap_escape_errorlog_item = (const void *)ap_escape_errorlog_item;
+const void *ap_hack_ap_construct_server = (const void *)ap_construct_server;
+const void *ap_hack_ap_escape_shell_cmd = (const void *)ap_escape_shell_cmd;
+const void *ap_hack_ap_count_dirs = (const void *)ap_count_dirs;
+const void *ap_hack_ap_make_dirstr_prefix = (const void *)ap_make_dirstr_prefix;
+const void *ap_hack_ap_make_dirstr_parent = (const void *)ap_make_dirstr_parent;
+const void *ap_hack_ap_make_full_path = (const void *)ap_make_full_path;
+const void *ap_hack_ap_os_is_path_absolute = (const void *)ap_os_is_path_absolute;
+const void *ap_hack_ap_is_matchexp = (const void *)ap_is_matchexp;
+const void *ap_hack_ap_strcmp_match = (const void *)ap_strcmp_match;
+const void *ap_hack_ap_strcasecmp_match = (const void *)ap_strcasecmp_match;
+const void *ap_hack_ap_strcasestr = (const void *)ap_strcasestr;
+const void *ap_hack_ap_stripprefix = (const void *)ap_stripprefix;
+const void *ap_hack_ap_pbase64decode = (const void *)ap_pbase64decode;
+const void *ap_hack_ap_pbase64decode_strict = (const void *)ap_pbase64decode_strict;
+const void *ap_hack_ap_pbase64encode = (const void *)ap_pbase64encode;
+const void *ap_hack_ap_pregcomp = (const void *)ap_pregcomp;
+const void *ap_hack_ap_pregfree = (const void *)ap_pregfree;
+const void *ap_hack_ap_pregsub = (const void *)ap_pregsub;
+const void *ap_hack_ap_pregsub_ex = (const void *)ap_pregsub_ex;
+const void *ap_hack_ap_content_type_tolower = (const void *)ap_content_type_tolower;
+const void *ap_hack_ap_str_tolower = (const void *)ap_str_tolower;
+const void *ap_hack_ap_str_toupper = (const void *)ap_str_toupper;
+const void *ap_hack_ap_ind = (const void *)ap_ind;
+const void *ap_hack_ap_rind = (const void *)ap_rind;
+const void *ap_hack_ap_escape_quotes = (const void *)ap_escape_quotes;
+const void *ap_hack_ap_append_pid = (const void *)ap_append_pid;
+const void *ap_hack_ap_parse_strict_length = (const void *)ap_parse_strict_length;
+const void *ap_hack_ap_timeout_parameter_parse = (const void *)ap_timeout_parameter_parse;
+const void *ap_hack_ap_request_has_body = (const void *)ap_request_has_body;
+const void *ap_hack_ap_request_tainted = (const void *)ap_request_tainted;
+const void *ap_hack_ap_pstr2_alnum = (const void *)ap_pstr2_alnum;
+const void *ap_hack_ap_str2_alnum = (const void *)ap_str2_alnum;
+const void *ap_hack_ap_parse_form_data = (const void *)ap_parse_form_data;
+const void *ap_hack_ap_is_rdirectory = (const void *)ap_is_rdirectory;
+const void *ap_hack_ap_is_directory = (const void *)ap_is_directory;
+const void *ap_hack_ap_log_assert = (const void *)ap_log_assert;
+const void *ap_hack_ap_psignature = (const void *)ap_psignature;
+const void *ap_hack_ap_strchr = (const void *)ap_strchr;
+const void *ap_hack_ap_strchr_c = (const void *)ap_strchr_c;
+const void *ap_hack_ap_strrchr = (const void *)ap_strrchr;
+const void *ap_hack_ap_strrchr_c = (const void *)ap_strrchr_c;
+const void *ap_hack_ap_strstr = (const void *)ap_strstr;
+const void *ap_hack_ap_strstr_c = (const void *)ap_strstr_c;
+const void *ap_hack_ap_palloc_debug = (const void *)ap_palloc_debug;
+const void *ap_hack_ap_pcalloc_debug = (const void *)ap_pcalloc_debug;
+const void *ap_hack_ap_random_insecure_bytes = (const void *)ap_random_insecure_bytes;
+const void *ap_hack_ap_random_pick = (const void *)ap_random_pick;
+const void *ap_hack_ap_abort_on_oom = (const void *)ap_abort_on_oom;
+const void *ap_hack_ap_malloc = (const void *)ap_malloc;
+const void *ap_hack_ap_calloc = (const void *)ap_calloc;
+const void *ap_hack_ap_realloc = (const void *)ap_realloc;
+const void *ap_hack_ap_get_sload = (const void *)ap_get_sload;
+const void *ap_hack_ap_get_loadavg = (const void *)ap_get_loadavg;
+const void *ap_hack_ap_bin2hex = (const void *)ap_bin2hex;
+const void *ap_hack_ap_password_validate = (const void *)ap_password_validate;
+const void *ap_hack_ap_get_exec_line = (const void *)ap_get_exec_line;
+const void *ap_hack_ap_array_str_index = (const void *)ap_array_str_index;
+const void *ap_hack_ap_array_str_contains = (const void *)ap_array_str_contains;
+const void *ap_hack_ap_cstr_casecmp = (const void *)ap_cstr_casecmp;
+const void *ap_hack_ap_cstr_casecmpn = (const void *)ap_cstr_casecmpn;
+const void *ap_hack_ap_dir_nofnmatch = (const void *)ap_dir_nofnmatch;
+const void *ap_hack_ap_dir_fnmatch = (const void *)ap_dir_fnmatch;
+const void *ap_hack_ap_is_chunked = (const void *)ap_is_chunked;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/include/http_log.h
+ */
+const void *ap_hack_ap_open_stderr_log = (const void *)ap_open_stderr_log;
+const void *ap_hack_ap_replace_stderr_log = (const void *)ap_replace_stderr_log;
+#ifdef DOXYGEN
+const void *ap_hack_ap_log_error = (const void *)ap_log_error;
+#else
+const void *ap_hack_ap_log_error_ = (const void *)ap_log_error_;
+#endif
+#ifdef DOXYGEN
+const void *ap_hack_ap_log_perror = (const void *)ap_log_perror;
+#else
+const void *ap_hack_ap_log_perror_ = (const void *)ap_log_perror_;
+#endif
+#ifdef DOXYGEN
+const void *ap_hack_ap_log_rerror = (const void *)ap_log_rerror;
+#else
+const void *ap_hack_ap_log_rerror_ = (const void *)ap_log_rerror_;
+#endif
+#ifdef DOXYGEN
+const void *ap_hack_ap_log_cerror = (const void *)ap_log_cerror;
+#else
+const void *ap_hack_ap_log_cerror_ = (const void *)ap_log_cerror_;
+#endif
+#ifdef DOXYGEN
+const void *ap_hack_ap_log_cserror = (const void *)ap_log_cserror;
+#else
+const void *ap_hack_ap_log_cserror_ = (const void *)ap_log_cserror_;
+#endif
+#ifdef DOXYGEN
+const void *ap_hack_ap_log_data = (const void *)ap_log_data;
+#else
+const void *ap_hack_ap_log_data_ = (const void *)ap_log_data_;
+#endif
+#ifdef DOXYGEN
+const void *ap_hack_ap_log_rdata = (const void *)ap_log_rdata;
+#else
+const void *ap_hack_ap_log_rdata_ = (const void *)ap_log_rdata_;
+#endif
+#ifdef DOXYGEN
+const void *ap_hack_ap_log_cdata = (const void *)ap_log_cdata;
+#else
+const void *ap_hack_ap_log_cdata_ = (const void *)ap_log_cdata_;
+#endif
+#ifdef DOXYGEN
+const void *ap_hack_ap_log_csdata = (const void *)ap_log_csdata;
+#else
+const void *ap_hack_ap_log_csdata_ = (const void *)ap_log_csdata_;
+#endif
+const void *ap_hack_ap_error_log2stderr = (const void *)ap_error_log2stderr;
+const void *ap_hack_ap_log_command_line = (const void *)ap_log_command_line;
+const void *ap_hack_ap_log_mpm_common = (const void *)ap_log_mpm_common;
+const void *ap_hack_ap_log_pid = (const void *)ap_log_pid;
+const void *ap_hack_ap_remove_pid = (const void *)ap_remove_pid;
+const void *ap_hack_ap_read_pid = (const void *)ap_read_pid;
+const void *ap_hack_ap_open_piped_log = (const void *)ap_open_piped_log;
+const void *ap_hack_ap_open_piped_log_ex = (const void *)ap_open_piped_log_ex;
+const void *ap_hack_ap_close_piped_log = (const void *)ap_close_piped_log;
+const void *ap_hack_ap_piped_log_read_fd = (const void *)ap_piped_log_read_fd;
+const void *ap_hack_ap_piped_log_write_fd = (const void *)ap_piped_log_write_fd;
+const void *ap_hack_ap_hook_generate_log_id = (const void *)ap_hook_generate_log_id;
+const void *ap_hack_ap_hook_get_generate_log_id = (const void *)ap_hook_get_generate_log_id;
+const void *ap_hack_ap_run_generate_log_id = (const void *)ap_run_generate_log_id;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/include/http_protocol.h
+ */
+const void *ap_hack_ap_hook_insert_error_filter = (const void *)ap_hook_insert_error_filter;
+const void *ap_hack_ap_hook_get_insert_error_filter = (const void *)ap_hook_get_insert_error_filter;
+const void *ap_hack_ap_run_insert_error_filter = (const void *)ap_run_insert_error_filter;
+const void *ap_hack_ap_create_request = (const void *)ap_create_request;
+const void *ap_hack_ap_parse_request_line = (const void *)ap_parse_request_line;
+const void *ap_hack_ap_check_request_header = (const void *)ap_check_request_header;
+const void *ap_hack_ap_get_mime_headers = (const void *)ap_get_mime_headers;
+const void *ap_hack_ap_get_mime_headers_core = (const void *)ap_get_mime_headers_core;
+const void *ap_hack_ap_finalize_request_protocol = (const void *)ap_finalize_request_protocol;
+const void *ap_hack_ap_send_error_response = (const void *)ap_send_error_response;
+const void *ap_hack_ap_set_content_length = (const void *)ap_set_content_length;
+const void *ap_hack_ap_set_keepalive = (const void *)ap_set_keepalive;
+const void *ap_hack_ap_rationalize_mtime = (const void *)ap_rationalize_mtime;
+const void *ap_hack_ap_make_content_type = (const void *)ap_make_content_type;
+const void *ap_hack_ap_setup_make_content_type = (const void *)ap_setup_make_content_type;
+const void *ap_hack_ap_make_etag = (const void *)ap_make_etag;
+const void *ap_hack_ap_make_etag_ex = (const void *)ap_make_etag_ex;
+const void *ap_hack_ap_set_etag = (const void *)ap_set_etag;
+const void *ap_hack_ap_set_etag_fd = (const void *)ap_set_etag_fd;
+const void *ap_hack_ap_set_last_modified = (const void *)ap_set_last_modified;
+const void *ap_hack_ap_condition_if_match = (const void *)ap_condition_if_match;
+const void *ap_hack_ap_condition_if_unmodified_since = (const void *)ap_condition_if_unmodified_since;
+const void *ap_hack_ap_condition_if_none_match = (const void *)ap_condition_if_none_match;
+const void *ap_hack_ap_condition_if_modified_since = (const void *)ap_condition_if_modified_since;
+const void *ap_hack_ap_condition_if_range = (const void *)ap_condition_if_range;
+const void *ap_hack_ap_meets_conditions = (const void *)ap_meets_conditions;
+const void *ap_hack_ap_send_fd = (const void *)ap_send_fd;
+#if APR_HAS_MMAP
+const void *ap_hack_ap_send_mmap = (const void *)ap_send_mmap;
+#endif
+const void *ap_hack_ap_method_register = (const void *)ap_method_register;
+const void *ap_hack_ap_method_registry_init = (const void *)ap_method_registry_init;
+const void *ap_hack_ap_make_method_list = (const void *)ap_make_method_list;
+const void *ap_hack_ap_copy_method_list = (const void *)ap_copy_method_list;
+const void *ap_hack_ap_method_in_list = (const void *)ap_method_in_list;
+const void *ap_hack_ap_method_list_add = (const void *)ap_method_list_add;
+const void *ap_hack_ap_method_list_remove = (const void *)ap_method_list_remove;
+const void *ap_hack_ap_clear_method_list = (const void *)ap_clear_method_list;
+const void *ap_hack_ap_set_content_type = (const void *)ap_set_content_type;
+const void *ap_hack_ap_set_accept_ranges = (const void *)ap_set_accept_ranges;
+const void *ap_hack_ap_rputc = (const void *)ap_rputc;
+const void *ap_hack_ap_rwrite = (const void *)ap_rwrite;
+const void *ap_hack_ap_rvputs = (const void *)ap_rvputs;
+const void *ap_hack_ap_vrprintf = (const void *)ap_vrprintf;
+const void *ap_hack_ap_rprintf = (const void *)ap_rprintf;
+const void *ap_hack_ap_rflush = (const void *)ap_rflush;
+const void *ap_hack_ap_index_of_response = (const void *)ap_index_of_response;
+const void *ap_hack_ap_get_status_line = (const void *)ap_get_status_line;
+const void *ap_hack_ap_get_status_line_ex = (const void *)ap_get_status_line_ex;
+const void *ap_hack_ap_setup_client_block = (const void *)ap_setup_client_block;
+const void *ap_hack_ap_should_client_block = (const void *)ap_should_client_block;
+const void *ap_hack_ap_get_client_block = (const void *)ap_get_client_block;
+const void *ap_hack_ap_map_http_request_error = (const void *)ap_map_http_request_error;
+const void *ap_hack_ap_discard_request_body = (const void *)ap_discard_request_body;
+const void *ap_hack_ap_note_auth_failure = (const void *)ap_note_auth_failure;
+const void *ap_hack_ap_note_basic_auth_failure = (const void *)ap_note_basic_auth_failure;
+const void *ap_hack_ap_note_digest_auth_failure = (const void *)ap_note_digest_auth_failure;
+const void *ap_hack_ap_hook_note_auth_failure = (const void *)ap_hook_note_auth_failure;
+const void *ap_hack_ap_hook_get_note_auth_failure = (const void *)ap_hook_get_note_auth_failure;
+const void *ap_hack_ap_run_note_auth_failure = (const void *)ap_run_note_auth_failure;
+const void *ap_hack_ap_get_basic_auth_pw = (const void *)ap_get_basic_auth_pw;
+const void *ap_hack_ap_get_basic_auth_components = (const void *)ap_get_basic_auth_components;
+const void *ap_hack_ap_parse_uri = (const void *)ap_parse_uri;
+const void *ap_hack_ap_getline = (const void *)ap_getline;
+const void *ap_hack_ap_fgetline = (const void *)ap_fgetline;
+const void *ap_hack_ap_rgetline = (const void *)ap_rgetline;
+const void *ap_hack_ap_method_number_of = (const void *)ap_method_number_of;
+const void *ap_hack_ap_method_name_of = (const void *)ap_method_name_of;
+const void *ap_hack_ap_hook_pre_read_request = (const void *)ap_hook_pre_read_request;
+const void *ap_hack_ap_hook_get_pre_read_request = (const void *)ap_hook_get_pre_read_request;
+const void *ap_hack_ap_run_pre_read_request = (const void *)ap_run_pre_read_request;
+const void *ap_hack_ap_hook_post_read_request = (const void *)ap_hook_post_read_request;
+const void *ap_hack_ap_hook_get_post_read_request = (const void *)ap_hook_get_post_read_request;
+const void *ap_hack_ap_run_post_read_request = (const void *)ap_run_post_read_request;
+const void *ap_hack_ap_hook_log_transaction = (const void *)ap_hook_log_transaction;
+const void *ap_hack_ap_hook_get_log_transaction = (const void *)ap_hook_get_log_transaction;
+const void *ap_hack_ap_run_log_transaction = (const void *)ap_run_log_transaction;
+const void *ap_hack_ap_hook_http_scheme = (const void *)ap_hook_http_scheme;
+const void *ap_hack_ap_hook_get_http_scheme = (const void *)ap_hook_get_http_scheme;
+const void *ap_hack_ap_run_http_scheme = (const void *)ap_run_http_scheme;
+const void *ap_hack_ap_hook_default_port = (const void *)ap_hook_default_port;
+const void *ap_hack_ap_hook_get_default_port = (const void *)ap_hook_get_default_port;
+const void *ap_hack_ap_run_default_port = (const void *)ap_run_default_port;
+const void *ap_hack_ap_hook_protocol_propose = (const void *)ap_hook_protocol_propose;
+const void *ap_hack_ap_hook_get_protocol_propose = (const void *)ap_hook_get_protocol_propose;
+const void *ap_hack_ap_run_protocol_propose = (const void *)ap_run_protocol_propose;
+const void *ap_hack_ap_hook_protocol_switch = (const void *)ap_hook_protocol_switch;
+const void *ap_hack_ap_hook_get_protocol_switch = (const void *)ap_hook_get_protocol_switch;
+const void *ap_hack_ap_run_protocol_switch = (const void *)ap_run_protocol_switch;
+const void *ap_hack_ap_hook_protocol_get = (const void *)ap_hook_protocol_get;
+const void *ap_hack_ap_hook_get_protocol_get = (const void *)ap_hook_get_protocol_get;
+const void *ap_hack_ap_run_protocol_get = (const void *)ap_run_protocol_get;
+const void *ap_hack_ap_get_protocol_upgrades = (const void *)ap_get_protocol_upgrades;
+const void *ap_hack_ap_select_protocol = (const void *)ap_select_protocol;
+const void *ap_hack_ap_switch_protocol = (const void *)ap_switch_protocol;
+const void *ap_hack_ap_get_protocol = (const void *)ap_get_protocol;
+const void *ap_hack_ap_is_allowed_protocol = (const void *)ap_is_allowed_protocol;
+const void *ap_hack_ap_bucket_error_make = (const void *)ap_bucket_error_make;
+const void *ap_hack_ap_bucket_error_create = (const void *)ap_bucket_error_create;
+const void *ap_hack_ap_byterange_filter = (const void *)ap_byterange_filter;
+const void *ap_hack_ap_http_header_filter = (const void *)ap_http_header_filter;
+const void *ap_hack_ap_content_length_filter = (const void *)ap_content_length_filter;
+const void *ap_hack_ap_old_write_filter = (const void *)ap_old_write_filter;
+const void *ap_hack_ap_set_sub_req_protocol = (const void *)ap_set_sub_req_protocol;
+const void *ap_hack_ap_finalize_sub_req_protocol = (const void *)ap_finalize_sub_req_protocol;
+const void *ap_hack_ap_send_interim_response = (const void *)ap_send_interim_response;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/include/http_request.h
+ */
+const void *ap_hack_ap_process_request_internal = (const void *)ap_process_request_internal;
+const void *ap_hack_ap_sub_req_lookup_uri = (const void *)ap_sub_req_lookup_uri;
+const void *ap_hack_ap_sub_req_lookup_file = (const void *)ap_sub_req_lookup_file;
+const void *ap_hack_ap_sub_req_lookup_dirent = (const void *)ap_sub_req_lookup_dirent;
+const void *ap_hack_ap_sub_req_method_uri = (const void *)ap_sub_req_method_uri;
+const void *ap_hack_ap_sub_req_output_filter = (const void *)ap_sub_req_output_filter;
+const void *ap_hack_ap_run_sub_req = (const void *)ap_run_sub_req;
+const void *ap_hack_ap_destroy_sub_req = (const void *)ap_destroy_sub_req;
+const void *ap_hack_ap_internal_redirect = (const void *)ap_internal_redirect;
+const void *ap_hack_ap_internal_redirect_handler = (const void *)ap_internal_redirect_handler;
+const void *ap_hack_ap_internal_fast_redirect = (const void *)ap_internal_fast_redirect;
+const void *ap_hack_ap_some_auth_required = (const void *)ap_some_auth_required;
+const void *ap_hack_ap_clear_auth_internal = (const void *)ap_clear_auth_internal;
+const void *ap_hack_ap_setup_auth_internal = (const void *)ap_setup_auth_internal;
+const void *ap_hack_ap_register_auth_provider = (const void *)ap_register_auth_provider;
+const void *ap_hack_ap_is_initial_req = (const void *)ap_is_initial_req;
+const void *ap_hack_ap_update_mtime = (const void *)ap_update_mtime;
+const void *ap_hack_ap_allow_methods = (const void *)ap_allow_methods;
+const void *ap_hack_ap_allow_standard_methods = (const void *)ap_allow_standard_methods;
+const void *ap_hack_ap_process_request = (const void *)ap_process_request;
+const void *ap_hack_ap_process_request_after_handler = (const void *)ap_process_request_after_handler;
+const void *ap_hack_ap_die = (const void *)ap_die;
+const void *ap_hack_ap_check_pipeline = (const void *)ap_check_pipeline;
+const void *ap_hack_ap_hook_create_request = (const void *)ap_hook_create_request;
+const void *ap_hack_ap_hook_get_create_request = (const void *)ap_hook_get_create_request;
+const void *ap_hack_ap_run_create_request = (const void *)ap_run_create_request;
+const void *ap_hack_ap_hook_pre_translate_name = (const void *)ap_hook_pre_translate_name;
+const void *ap_hack_ap_hook_get_pre_translate_name = (const void *)ap_hook_get_pre_translate_name;
+const void *ap_hack_ap_run_pre_translate_name = (const void *)ap_run_pre_translate_name;
+const void *ap_hack_ap_hook_translate_name = (const void *)ap_hook_translate_name;
+const void *ap_hack_ap_hook_get_translate_name = (const void *)ap_hook_get_translate_name;
+const void *ap_hack_ap_run_translate_name = (const void *)ap_run_translate_name;
+const void *ap_hack_ap_hook_map_to_storage = (const void *)ap_hook_map_to_storage;
+const void *ap_hack_ap_hook_get_map_to_storage = (const void *)ap_hook_get_map_to_storage;
+const void *ap_hack_ap_run_map_to_storage = (const void *)ap_run_map_to_storage;
+const void *ap_hack_ap_hook_check_user_id = (const void *)ap_hook_check_user_id;
+const void *ap_hack_ap_hook_get_check_user_id = (const void *)ap_hook_get_check_user_id;
+const void *ap_hack_ap_run_check_user_id = (const void *)ap_run_check_user_id;
+const void *ap_hack_ap_hook_fixups = (const void *)ap_hook_fixups;
+const void *ap_hack_ap_hook_get_fixups = (const void *)ap_hook_get_fixups;
+const void *ap_hack_ap_run_fixups = (const void *)ap_run_fixups;
+const void *ap_hack_ap_hook_type_checker = (const void *)ap_hook_type_checker;
+const void *ap_hack_ap_hook_get_type_checker = (const void *)ap_hook_get_type_checker;
+const void *ap_hack_ap_run_type_checker = (const void *)ap_run_type_checker;
+const void *ap_hack_ap_hook_access_checker = (const void *)ap_hook_access_checker;
+const void *ap_hack_ap_hook_get_access_checker = (const void *)ap_hook_get_access_checker;
+const void *ap_hack_ap_run_access_checker = (const void *)ap_run_access_checker;
+const void *ap_hack_ap_hook_access_checker_ex = (const void *)ap_hook_access_checker_ex;
+const void *ap_hack_ap_hook_get_access_checker_ex = (const void *)ap_hook_get_access_checker_ex;
+const void *ap_hack_ap_run_access_checker_ex = (const void *)ap_run_access_checker_ex;
+const void *ap_hack_ap_hook_auth_checker = (const void *)ap_hook_auth_checker;
+const void *ap_hack_ap_hook_get_auth_checker = (const void *)ap_hook_get_auth_checker;
+const void *ap_hack_ap_run_auth_checker = (const void *)ap_run_auth_checker;
+const void *ap_hack_ap_hook_check_access = (const void *)ap_hook_check_access;
+const void *ap_hack_ap_hook_check_access_ex = (const void *)ap_hook_check_access_ex;
+const void *ap_hack_ap_hook_check_authn = (const void *)ap_hook_check_authn;
+const void *ap_hack_ap_hook_check_authz = (const void *)ap_hook_check_authz;
+const void *ap_hack_ap_hook_insert_filter = (const void *)ap_hook_insert_filter;
+const void *ap_hack_ap_hook_get_insert_filter = (const void *)ap_hook_get_insert_filter;
+const void *ap_hack_ap_run_insert_filter = (const void *)ap_run_insert_filter;
+const void *ap_hack_ap_hook_post_perdir_config = (const void *)ap_hook_post_perdir_config;
+const void *ap_hack_ap_hook_get_post_perdir_config = (const void *)ap_hook_get_post_perdir_config;
+const void *ap_hack_ap_run_post_perdir_config = (const void *)ap_run_post_perdir_config;
+const void *ap_hack_ap_hook_force_authn = (const void *)ap_hook_force_authn;
+const void *ap_hack_ap_hook_get_force_authn = (const void *)ap_hook_get_force_authn;
+const void *ap_hack_ap_run_force_authn = (const void *)ap_run_force_authn;
+const void *ap_hack_ap_hook_dirwalk_stat = (const void *)ap_hook_dirwalk_stat;
+const void *ap_hack_ap_hook_get_dirwalk_stat = (const void *)ap_hook_get_dirwalk_stat;
+const void *ap_hack_ap_run_dirwalk_stat = (const void *)ap_run_dirwalk_stat;
+const void *ap_hack_ap_location_walk = (const void *)ap_location_walk;
+const void *ap_hack_ap_directory_walk = (const void *)ap_directory_walk;
+const void *ap_hack_ap_file_walk = (const void *)ap_file_walk;
+const void *ap_hack_ap_if_walk = (const void *)ap_if_walk;
+const void *ap_hack_ap_bucket_eor_make = (const void *)ap_bucket_eor_make;
+const void *ap_hack_ap_bucket_eor_create = (const void *)ap_bucket_eor_create;
+const void *ap_hack_ap_bucket_eor_request = (const void *)ap_bucket_eor_request;
+const void *ap_hack_ap_some_authn_required = (const void *)ap_some_authn_required;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/include/http_vhost.h
+ */
+const void *ap_hack_ap_init_vhost_config = (const void *)ap_init_vhost_config;
+const void *ap_hack_ap_fini_vhost_config = (const void *)ap_fini_vhost_config;
+const void *ap_hack_ap_parse_vhost_addrs = (const void *)ap_parse_vhost_addrs;
+const void *ap_hack_ap_set_name_virtual_host = (const void *)ap_set_name_virtual_host;
+const void *ap_hack_ap_vhost_iterate_given_conn = (const void *)ap_vhost_iterate_given_conn;
+const void *ap_hack_ap_update_vhost_given_ip = (const void *)ap_update_vhost_given_ip;
+const void *ap_hack_ap_update_vhost_from_headers = (const void *)ap_update_vhost_from_headers;
+const void *ap_hack_ap_update_vhost_from_headers_ex = (const void *)ap_update_vhost_from_headers_ex;
+const void *ap_hack_ap_matches_request_vhost = (const void *)ap_matches_request_vhost;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/include/mod_core.h
+ */
+const void *ap_hack_ap_basic_http_header = (const void *)ap_basic_http_header;
+const void *ap_hack_ap_send_http_trace = (const void *)ap_send_http_trace;
+const void *ap_hack_ap_send_http_options = (const void *)ap_send_http_options;
+const void *ap_hack_ap_init_rng = (const void *)ap_init_rng;
+const void *ap_hack_ap_random_parent_after_fork = (const void *)ap_random_parent_after_fork;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/include/mpm_common.h
+ */
+#if (!defined(WIN32) && !defined(NETWARE)) || defined(DOXYGEN)
+const void *ap_hack_ap_reclaim_child_processes = (const void *)ap_reclaim_child_processes;
+const void *ap_hack_ap_relieve_child_processes = (const void *)ap_relieve_child_processes;
+const void *ap_hack_ap_register_extra_mpm_process = (const void *)ap_register_extra_mpm_process;
+const void *ap_hack_ap_unregister_extra_mpm_process = (const void *)ap_unregister_extra_mpm_process;
+const void *ap_hack_ap_mpm_safe_kill = (const void *)ap_mpm_safe_kill;
+const void *ap_hack_ap_process_child_status = (const void *)ap_process_child_status;
+const void *ap_hack_ap_fatal_signal_setup = (const void *)ap_fatal_signal_setup;
+const void *ap_hack_ap_fatal_signal_child_setup = (const void *)ap_fatal_signal_child_setup;
+#endif /* (!WIN32 && !NETWARE) || DOXYGEN */
+const void *ap_hack_ap_wait_or_timeout = (const void *)ap_wait_or_timeout;
+#ifdef HAVE_GETPWNAM
+const void *ap_hack_ap_uname2id = (const void *)ap_uname2id;
+#endif
+#ifdef HAVE_GETGRNAM
+const void *ap_hack_ap_gname2id = (const void *)ap_gname2id;
+#endif
+#if (!defined(WIN32) && !defined(NETWARE)) || defined(DOXYGEN)
+const void *ap_hack_ap_mpm_pod_open = (const void *)ap_mpm_pod_open;
+const void *ap_hack_ap_mpm_pod_check = (const void *)ap_mpm_pod_check;
+const void *ap_hack_ap_mpm_pod_close = (const void *)ap_mpm_pod_close;
+const void *ap_hack_ap_mpm_pod_signal = (const void *)ap_mpm_pod_signal;
+const void *ap_hack_ap_mpm_pod_killpg = (const void *)ap_mpm_pod_killpg;
+const void *ap_hack_ap_mpm_podx_open = (const void *)ap_mpm_podx_open;
+const void *ap_hack_ap_mpm_podx_check = (const void *)ap_mpm_podx_check;
+const void *ap_hack_ap_mpm_podx_close = (const void *)ap_mpm_podx_close;
+const void *ap_hack_ap_mpm_podx_signal = (const void *)ap_mpm_podx_signal;
+const void *ap_hack_ap_mpm_podx_killpg = (const void *)ap_mpm_podx_killpg;
+#endif /* (!WIN32 && !NETWARE) || DOXYGEN */
+const void *ap_hack_ap_check_mpm = (const void *)ap_check_mpm;
+const void *ap_hack_ap_mpm_set_graceful_shutdown = (const void *)ap_mpm_set_graceful_shutdown;
+const void *ap_hack_ap_hook_monitor = (const void *)ap_hook_monitor;
+const void *ap_hack_ap_hook_get_monitor = (const void *)ap_hook_get_monitor;
+const void *ap_hack_ap_run_monitor = (const void *)ap_run_monitor;
+const void *ap_hack_ap_sys_privileges_handlers = (const void *)ap_sys_privileges_handlers;
+const void *ap_hack_ap_hook_drop_privileges = (const void *)ap_hook_drop_privileges;
+const void *ap_hack_ap_hook_get_drop_privileges = (const void *)ap_hook_get_drop_privileges;
+const void *ap_hack_ap_run_drop_privileges = (const void *)ap_run_drop_privileges;
+const void *ap_hack_ap_hook_mpm_query = (const void *)ap_hook_mpm_query;
+const void *ap_hack_ap_hook_get_mpm_query = (const void *)ap_hook_get_mpm_query;
+const void *ap_hack_ap_run_mpm_query = (const void *)ap_run_mpm_query;
+const void *ap_hack_ap_hook_mpm_register_timed_callback = (const void *)ap_hook_mpm_register_timed_callback;
+const void *ap_hack_ap_hook_get_mpm_register_timed_callback = (const void *)ap_hook_get_mpm_register_timed_callback;
+const void *ap_hack_ap_run_mpm_register_timed_callback = (const void *)ap_run_mpm_register_timed_callback;
+const void *ap_hack_ap_hook_mpm_register_poll_callback = (const void *)ap_hook_mpm_register_poll_callback;
+const void *ap_hack_ap_hook_get_mpm_register_poll_callback = (const void *)ap_hook_get_mpm_register_poll_callback;
+const void *ap_hack_ap_run_mpm_register_poll_callback = (const void *)ap_run_mpm_register_poll_callback;
+const void *ap_hack_ap_hook_mpm_register_poll_callback_timeout = (const void *)ap_hook_mpm_register_poll_callback_timeout;
+const void *ap_hack_ap_hook_get_mpm_register_poll_callback_timeout = (const void *)ap_hook_get_mpm_register_poll_callback_timeout;
+const void *ap_hack_ap_run_mpm_register_poll_callback_timeout = (const void *)ap_run_mpm_register_poll_callback_timeout;
+const void *ap_hack_ap_hook_mpm_resume_suspended = (const void *)ap_hook_mpm_resume_suspended;
+const void *ap_hack_ap_hook_get_mpm_resume_suspended = (const void *)ap_hook_get_mpm_resume_suspended;
+const void *ap_hack_ap_run_mpm_resume_suspended = (const void *)ap_run_mpm_resume_suspended;
+const void *ap_hack_ap_hook_mpm_get_name = (const void *)ap_hook_mpm_get_name;
+const void *ap_hack_ap_hook_get_mpm_get_name = (const void *)ap_hook_get_mpm_get_name;
+const void *ap_hack_ap_run_mpm_get_name = (const void *)ap_run_mpm_get_name;
+const void *ap_hack_ap_hook_output_pending = (const void *)ap_hook_output_pending;
+const void *ap_hack_ap_hook_get_output_pending = (const void *)ap_hook_get_output_pending;
+const void *ap_hack_ap_run_output_pending = (const void *)ap_run_output_pending;
+const void *ap_hack_ap_hook_input_pending = (const void *)ap_hook_input_pending;
+const void *ap_hack_ap_hook_get_input_pending = (const void *)ap_hook_get_input_pending;
+const void *ap_hack_ap_run_input_pending = (const void *)ap_run_input_pending;
+const void *ap_hack_ap_hook_suspend_connection = (const void *)ap_hook_suspend_connection;
+const void *ap_hack_ap_hook_get_suspend_connection = (const void *)ap_hook_get_suspend_connection;
+const void *ap_hack_ap_run_suspend_connection = (const void *)ap_run_suspend_connection;
+const void *ap_hack_ap_hook_resume_connection = (const void *)ap_hook_resume_connection;
+const void *ap_hack_ap_hook_get_resume_connection = (const void *)ap_hook_get_resume_connection;
+const void *ap_hack_ap_run_resume_connection = (const void *)ap_run_resume_connection;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/include/scoreboard.h
+ */
+const void *ap_hack_ap_exists_scoreboard_image = (const void *)ap_exists_scoreboard_image;
+const void *ap_hack_ap_increment_counts = (const void *)ap_increment_counts;
+const void *ap_hack_ap_set_conn_count = (const void *)ap_set_conn_count;
+const void *ap_hack_ap_reopen_scoreboard = (const void *)ap_reopen_scoreboard;
+const void *ap_hack_ap_init_scoreboard = (const void *)ap_init_scoreboard;
+const void *ap_hack_ap_calc_scoreboard_size = (const void *)ap_calc_scoreboard_size;
+const void *ap_hack_ap_create_sb_handle = (const void *)ap_create_sb_handle;
+const void *ap_hack_ap_update_sb_handle = (const void *)ap_update_sb_handle;
+const void *ap_hack_ap_find_child_by_pid = (const void *)ap_find_child_by_pid;
+const void *ap_hack_ap_update_child_status = (const void *)ap_update_child_status;
+const void *ap_hack_ap_update_child_status_from_indexes = (const void *)ap_update_child_status_from_indexes;
+const void *ap_hack_ap_update_child_status_from_conn = (const void *)ap_update_child_status_from_conn;
+const void *ap_hack_ap_update_child_status_from_server = (const void *)ap_update_child_status_from_server;
+const void *ap_hack_ap_update_child_status_descr = (const void *)ap_update_child_status_descr;
+const void *ap_hack_ap_time_process_request = (const void *)ap_time_process_request;
+const void *ap_hack_ap_update_global_status = (const void *)ap_update_global_status;
+const void *ap_hack_ap_get_scoreboard_worker = (const void *)ap_get_scoreboard_worker;
+const void *ap_hack_ap_get_scoreboard_worker_from_indexes = (const void *)ap_get_scoreboard_worker_from_indexes;
+const void *ap_hack_ap_copy_scoreboard_worker = (const void *)ap_copy_scoreboard_worker;
+const void *ap_hack_ap_get_scoreboard_process = (const void *)ap_get_scoreboard_process;
+const void *ap_hack_ap_get_scoreboard_global = (const void *)ap_get_scoreboard_global;
+const void *ap_hack_ap_hook_pre_mpm = (const void *)ap_hook_pre_mpm;
+const void *ap_hack_ap_hook_get_pre_mpm = (const void *)ap_hook_get_pre_mpm;
+const void *ap_hack_ap_run_pre_mpm = (const void *)ap_run_pre_mpm;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/include/util_cookies.h
+ */
+const void *ap_hack_ap_cookie_write = (const void *)ap_cookie_write;
+const void *ap_hack_ap_cookie_write2 = (const void *)ap_cookie_write2;
+const void *ap_hack_ap_cookie_remove = (const void *)ap_cookie_remove;
+const void *ap_hack_ap_cookie_remove2 = (const void *)ap_cookie_remove2;
+const void *ap_hack_ap_cookie_read = (const void *)ap_cookie_read;
+const void *ap_hack_ap_cookie_check_string = (const void *)ap_cookie_check_string;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/include/util_fcgi.h
+ */
+const void *ap_hack_ap_fcgi_header_to_array = (const void *)ap_fcgi_header_to_array;
+const void *ap_hack_ap_fcgi_header_from_array = (const void *)ap_fcgi_header_from_array;
+const void *ap_hack_ap_fcgi_header_fields_from_array = (const void *)ap_fcgi_header_fields_from_array;
+const void *ap_hack_ap_fcgi_begin_request_body_to_array = (const void *)ap_fcgi_begin_request_body_to_array;
+const void *ap_hack_ap_fcgi_fill_in_header = (const void *)ap_fcgi_fill_in_header;
+const void *ap_hack_ap_fcgi_fill_in_request_body = (const void *)ap_fcgi_fill_in_request_body;
+const void *ap_hack_ap_fcgi_encoded_env_len = (const void *)ap_fcgi_encoded_env_len;
+const void *ap_hack_ap_fcgi_encode_env = (const void *)ap_fcgi_encode_env;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/include/util_filter.h
+ */
+const void *ap_hack_ap_acquire_brigade = (const void *)ap_acquire_brigade;
+const void *ap_hack_ap_release_brigade = (const void *)ap_release_brigade;
+const void *ap_hack_ap_get_brigade = (const void *)ap_get_brigade;
+const void *ap_hack_ap_pass_brigade = (const void *)ap_pass_brigade;
+const void *ap_hack_ap_pass_brigade_fchk = (const void *)ap_pass_brigade_fchk;
+const void *ap_hack_ap_register_input_filter = (const void *)ap_register_input_filter;
+const void *ap_hack_ap_register_output_filter = (const void *)ap_register_output_filter;
+const void *ap_hack_ap_register_output_filter_protocol = (const void *)ap_register_output_filter_protocol;
+const void *ap_hack_ap_add_input_filter = (const void *)ap_add_input_filter;
+const void *ap_hack_ap_add_input_filter_handle = (const void *)ap_add_input_filter_handle;
+const void *ap_hack_ap_get_input_filter_handle = (const void *)ap_get_input_filter_handle;
+const void *ap_hack_ap_add_output_filter = (const void *)ap_add_output_filter;
+const void *ap_hack_ap_add_output_filter_handle = (const void *)ap_add_output_filter_handle;
+const void *ap_hack_ap_get_output_filter_handle = (const void *)ap_get_output_filter_handle;
+const void *ap_hack_ap_remove_input_filter = (const void *)ap_remove_input_filter;
+const void *ap_hack_ap_remove_output_filter = (const void *)ap_remove_output_filter;
+const void *ap_hack_ap_remove_input_filter_byhandle = (const void *)ap_remove_input_filter_byhandle;
+const void *ap_hack_ap_remove_output_filter_byhandle = (const void *)ap_remove_output_filter_byhandle;
+const void *ap_hack_ap_save_brigade = (const void *)ap_save_brigade;
+const void *ap_hack_ap_filter_prepare_brigade = (const void *)ap_filter_prepare_brigade;
+const void *ap_hack_ap_filter_setaside_brigade = (const void *)ap_filter_setaside_brigade;
+const void *ap_hack_ap_filter_reinstate_brigade = (const void *)ap_filter_reinstate_brigade;
+const void *ap_hack_ap_filter_adopt_brigade = (const void *)ap_filter_adopt_brigade;
+const void *ap_hack_ap_filter_should_yield = (const void *)ap_filter_should_yield;
+const void *ap_hack_ap_filter_output_pending = (const void *)ap_filter_output_pending;
+const void *ap_hack_ap_filter_input_pending = (const void *)ap_filter_input_pending;
+const void *ap_hack_ap_filter_flush = (const void *)ap_filter_flush;
+const void *ap_hack_ap_fflush = (const void *)ap_fflush;
+const void *ap_hack_ap_fputstrs = (const void *)ap_fputstrs;
+const void *ap_hack_ap_fprintf = (const void *)ap_fprintf;
+const void *ap_hack_ap_filter_protocol = (const void *)ap_filter_protocol;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/include/util_md5.h
+ */
+const void *ap_hack_ap_md5 = (const void *)ap_md5;
+const void *ap_hack_ap_md5_binary = (const void *)ap_md5_binary;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/include/util_mutex.h
+ */
+const void *ap_hack_ap_parse_mutex = (const void *)ap_parse_mutex;
+const void *ap_hack_ap_set_mutex = (const void *)ap_set_mutex;
+const void *ap_hack_ap_mutex_init = (const void *)ap_mutex_init;
+const void *ap_hack_ap_mutex_register = (const void *)ap_mutex_register;
+const void *ap_hack_ap_global_mutex_create = (const void *)ap_global_mutex_create;
+const void *ap_hack_ap_proc_mutex_create = (const void *)ap_proc_mutex_create;
+const void *ap_hack_ap_dump_mutexes = (const void *)ap_dump_mutexes;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/include/util_script.h
+ */
+const void *ap_hack_ap_create_environment = (const void *)ap_create_environment;
+const void *ap_hack_ap_find_path_info = (const void *)ap_find_path_info;
+const void *ap_hack_ap_add_cgi_vars = (const void *)ap_add_cgi_vars;
+const void *ap_hack_ap_add_common_vars = (const void *)ap_add_common_vars;
+const void *ap_hack_ap_scan_script_header_err = (const void *)ap_scan_script_header_err;
+const void *ap_hack_ap_scan_script_header_err_ex = (const void *)ap_scan_script_header_err_ex;
+const void *ap_hack_ap_scan_script_header_err_brigade = (const void *)ap_scan_script_header_err_brigade;
+const void *ap_hack_ap_scan_script_header_err_brigade_ex = (const void *)ap_scan_script_header_err_brigade_ex;
+const void *ap_hack_ap_scan_script_header_err_strs = (const void *)ap_scan_script_header_err_strs;
+const void *ap_hack_ap_scan_script_header_err_strs_ex = (const void *)ap_scan_script_header_err_strs_ex;
+const void *ap_hack_ap_scan_script_header_err_core = (const void *)ap_scan_script_header_err_core;
+const void *ap_hack_ap_scan_script_header_err_core_ex = (const void *)ap_scan_script_header_err_core_ex;
+const void *ap_hack_ap_args_to_table = (const void *)ap_args_to_table;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/include/util_time.h
+ */
+const void *ap_hack_ap_explode_recent_localtime = (const void *)ap_explode_recent_localtime;
+const void *ap_hack_ap_explode_recent_gmt = (const void *)ap_explode_recent_gmt;
+const void *ap_hack_ap_recent_ctime = (const void *)ap_recent_ctime;
+const void *ap_hack_ap_recent_ctime_ex = (const void *)ap_recent_ctime_ex;
+const void *ap_hack_ap_recent_rfc822_date = (const void *)ap_recent_rfc822_date;
+const void *ap_hack_ap_force_set_tz = (const void *)ap_force_set_tz;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/include/util_varbuf.h
+ */
+const void *ap_hack_ap_varbuf_init = (const void *)ap_varbuf_init;
+const void *ap_hack_ap_varbuf_grow = (const void *)ap_varbuf_grow;
+const void *ap_hack_ap_varbuf_free = (const void *)ap_varbuf_free;
+const void *ap_hack_ap_varbuf_strmemcat = (const void *)ap_varbuf_strmemcat;
+const void *ap_hack_ap_varbuf_pdup = (const void *)ap_varbuf_pdup;
+const void *ap_hack_ap_varbuf_regsub = (const void *)ap_varbuf_regsub;
+const void *ap_hack_ap_varbuf_cfg_getline = (const void *)ap_varbuf_cfg_getline;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/include/util_xml.h
+ */
+const void *ap_hack_ap_xml_parse_input = (const void *)ap_xml_parse_input;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/os/unix/unixd.h
+ */
+const void *ap_hack_ap_hook_get_suexec_identity = (const void *)ap_hook_get_suexec_identity;
+const void *ap_hack_ap_hook_get_get_suexec_identity = (const void *)ap_hook_get_get_suexec_identity;
+const void *ap_hack_ap_run_get_suexec_identity = (const void *)ap_run_get_suexec_identity;
+#if defined(RLIMIT_CPU) || defined(RLIMIT_DATA) || defined(RLIMIT_VMEM) || defined(RLIMIT_NPROC) || defined(RLIMIT_AS)
+const void *ap_hack_ap_unixd_set_rlimit = (const void *)ap_unixd_set_rlimit;
+#endif
+const void *ap_hack_ap_unixd_set_proc_mutex_perms = (const void *)ap_unixd_set_proc_mutex_perms;
+const void *ap_hack_ap_unixd_set_global_mutex_perms = (const void *)ap_unixd_set_global_mutex_perms;
+const void *ap_hack_ap_unixd_accept = (const void *)ap_unixd_accept;
+const void *ap_hack_ap_unixd_mpm_get_retained_data = (const void *)ap_unixd_mpm_get_retained_data;
+const void *ap_hack_ap_unixd_mpm_set_signals = (const void *)ap_unixd_mpm_set_signals;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/server/mpm_fdqueue.h
+ */
+#if APR_HAS_THREADS
+const void *ap_hack_ap_queue_info_create = (const void *)ap_queue_info_create;
+const void *ap_hack_ap_queue_info_set_idle = (const void *)ap_queue_info_set_idle;
+const void *ap_hack_ap_queue_info_try_get_idler = (const void *)ap_queue_info_try_get_idler;
+const void *ap_hack_ap_queue_info_wait_for_idler = (const void *)ap_queue_info_wait_for_idler;
+const void *ap_hack_ap_queue_info_num_idlers = (const void *)ap_queue_info_num_idlers;
+const void *ap_hack_ap_queue_info_term = (const void *)ap_queue_info_term;
+const void *ap_hack_ap_queue_info_pop_pool = (const void *)ap_queue_info_pop_pool;
+const void *ap_hack_ap_queue_info_push_pool = (const void *)ap_queue_info_push_pool;
+const void *ap_hack_ap_queue_info_free_idle_pools = (const void *)ap_queue_info_free_idle_pools;
+const void *ap_hack_ap_queue_create = (const void *)ap_queue_create;
+const void *ap_hack_ap_queue_push_socket = (const void *)ap_queue_push_socket;
+const void *ap_hack_ap_queue_push_timer = (const void *)ap_queue_push_timer;
+const void *ap_hack_ap_queue_pop_something = (const void *)ap_queue_pop_something;
+const void *ap_hack_ap_queue_interrupt_all = (const void *)ap_queue_interrupt_all;
+const void *ap_hack_ap_queue_interrupt_one = (const void *)ap_queue_interrupt_one;
+const void *ap_hack_ap_queue_term = (const void *)ap_queue_term;
+#endif /* APR_HAS_THREADS */
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_allocator.h
+ */
+const void *ap_hack_apr_allocator_create = (const void *)apr_allocator_create;
+const void *ap_hack_apr_allocator_destroy = (const void *)apr_allocator_destroy;
+const void *ap_hack_apr_allocator_alloc = (const void *)apr_allocator_alloc;
+const void *ap_hack_apr_allocator_free = (const void *)apr_allocator_free;
+const void *ap_hack_apr_allocator_page_size = (const void *)apr_allocator_page_size;
+const void *ap_hack_apr_allocator_min_order_set = (const void *)apr_allocator_min_order_set;
+const void *ap_hack_apr_allocator_align = (const void *)apr_allocator_align;
+const void *ap_hack_apr_allocator_owner_set = (const void *)apr_allocator_owner_set;
+const void *ap_hack_apr_allocator_owner_get = (const void *)apr_allocator_owner_get;
+const void *ap_hack_apr_allocator_max_free_set = (const void *)apr_allocator_max_free_set;
+#if APR_HAS_THREADS
+const void *ap_hack_apr_allocator_mutex_set = (const void *)apr_allocator_mutex_set;
+const void *ap_hack_apr_allocator_mutex_get = (const void *)apr_allocator_mutex_get;
+#endif /* APR_HAS_THREADS */
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_atomic.h
+ */
+const void *ap_hack_apr_atomic_init = (const void *)apr_atomic_init;
+const void *ap_hack_apr_atomic_read32 = (const void *)apr_atomic_read32;
+const void *ap_hack_apr_atomic_set32 = (const void *)apr_atomic_set32;
+const void *ap_hack_apr_atomic_add32 = (const void *)apr_atomic_add32;
+const void *ap_hack_apr_atomic_sub32 = (const void *)apr_atomic_sub32;
+const void *ap_hack_apr_atomic_inc32 = (const void *)apr_atomic_inc32;
+const void *ap_hack_apr_atomic_dec32 = (const void *)apr_atomic_dec32;
+const void *ap_hack_apr_atomic_cas32 = (const void *)apr_atomic_cas32;
+const void *ap_hack_apr_atomic_xchg32 = (const void *)apr_atomic_xchg32;
+const void *ap_hack_apr_atomic_read64 = (const void *)apr_atomic_read64;
+const void *ap_hack_apr_atomic_set64 = (const void *)apr_atomic_set64;
+const void *ap_hack_apr_atomic_add64 = (const void *)apr_atomic_add64;
+const void *ap_hack_apr_atomic_sub64 = (const void *)apr_atomic_sub64;
+const void *ap_hack_apr_atomic_inc64 = (const void *)apr_atomic_inc64;
+const void *ap_hack_apr_atomic_dec64 = (const void *)apr_atomic_dec64;
+const void *ap_hack_apr_atomic_cas64 = (const void *)apr_atomic_cas64;
+const void *ap_hack_apr_atomic_xchg64 = (const void *)apr_atomic_xchg64;
+const void *ap_hack_apr_atomic_casptr = (const void *)apr_atomic_casptr;
+const void *ap_hack_apr_atomic_xchgptr = (const void *)apr_atomic_xchgptr;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_base64.h
+ */
+const void *ap_hack_apr_base64_encode_len = (const void *)apr_base64_encode_len;
+const void *ap_hack_apr_base64_encode = (const void *)apr_base64_encode;
+const void *ap_hack_apr_base64_encode_binary = (const void *)apr_base64_encode_binary;
+const void *ap_hack_apr_pbase64_encode = (const void *)apr_pbase64_encode;
+const void *ap_hack_apr_base64_decode_len = (const void *)apr_base64_decode_len;
+const void *ap_hack_apr_base64_decode = (const void *)apr_base64_decode;
+const void *ap_hack_apr_base64_decode_binary = (const void *)apr_base64_decode_binary;
+const void *ap_hack_apr_pbase64_decode = (const void *)apr_pbase64_decode;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_buckets.h
+ */
+const void *ap_hack_apr_brigade_create = (const void *)apr_brigade_create;
+const void *ap_hack_apr_brigade_destroy = (const void *)apr_brigade_destroy;
+const void *ap_hack_apr_brigade_cleanup = (const void *)apr_brigade_cleanup;
+const void *ap_hack_apr_brigade_split_ex = (const void *)apr_brigade_split_ex;
+const void *ap_hack_apr_brigade_split = (const void *)apr_brigade_split;
+const void *ap_hack_apr_brigade_partition = (const void *)apr_brigade_partition;
+const void *ap_hack_apr_brigade_length = (const void *)apr_brigade_length;
+const void *ap_hack_apr_brigade_flatten = (const void *)apr_brigade_flatten;
+const void *ap_hack_apr_brigade_pflatten = (const void *)apr_brigade_pflatten;
+const void *ap_hack_apr_brigade_split_line = (const void *)apr_brigade_split_line;
+const void *ap_hack_apr_brigade_to_iovec = (const void *)apr_brigade_to_iovec;
+const void *ap_hack_apr_brigade_vputstrs = (const void *)apr_brigade_vputstrs;
+const void *ap_hack_apr_brigade_write = (const void *)apr_brigade_write;
+const void *ap_hack_apr_brigade_writev = (const void *)apr_brigade_writev;
+const void *ap_hack_apr_brigade_puts = (const void *)apr_brigade_puts;
+const void *ap_hack_apr_brigade_putc = (const void *)apr_brigade_putc;
+const void *ap_hack_apr_brigade_putstrs = (const void *)apr_brigade_putstrs;
+const void *ap_hack_apr_brigade_printf = (const void *)apr_brigade_printf;
+const void *ap_hack_apr_brigade_vprintf = (const void *)apr_brigade_vprintf;
+const void *ap_hack_apr_brigade_insert_file = (const void *)apr_brigade_insert_file;
+const void *ap_hack_apr_bucket_alloc_create = (const void *)apr_bucket_alloc_create;
+const void *ap_hack_apr_bucket_alloc_create_ex = (const void *)apr_bucket_alloc_create_ex;
+const void *ap_hack_apr_bucket_alloc_destroy = (const void *)apr_bucket_alloc_destroy;
+const void *ap_hack_apr_bucket_alloc_aligned_floor = (const void *)apr_bucket_alloc_aligned_floor;
+const void *ap_hack_apr_bucket_alloc = (const void *)apr_bucket_alloc;
+const void *ap_hack_apr_bucket_free = (const void *)apr_bucket_free;
+const void *ap_hack_apr_bucket_setaside_noop = (const void *)apr_bucket_setaside_noop;
+const void *ap_hack_apr_bucket_setaside_notimpl = (const void *)apr_bucket_setaside_notimpl;
+const void *ap_hack_apr_bucket_split_notimpl = (const void *)apr_bucket_split_notimpl;
+const void *ap_hack_apr_bucket_copy_notimpl = (const void *)apr_bucket_copy_notimpl;
+const void *ap_hack_apr_bucket_destroy_noop = (const void *)apr_bucket_destroy_noop;
+const void *ap_hack_apr_bucket_simple_split = (const void *)apr_bucket_simple_split;
+const void *ap_hack_apr_bucket_simple_copy = (const void *)apr_bucket_simple_copy;
+const void *ap_hack_apr_bucket_shared_make = (const void *)apr_bucket_shared_make;
+const void *ap_hack_apr_bucket_shared_destroy = (const void *)apr_bucket_shared_destroy;
+const void *ap_hack_apr_bucket_shared_split = (const void *)apr_bucket_shared_split;
+const void *ap_hack_apr_bucket_shared_copy = (const void *)apr_bucket_shared_copy;
+const void *ap_hack_apr_bucket_eos_create = (const void *)apr_bucket_eos_create;
+const void *ap_hack_apr_bucket_eos_make = (const void *)apr_bucket_eos_make;
+const void *ap_hack_apr_bucket_flush_create = (const void *)apr_bucket_flush_create;
+const void *ap_hack_apr_bucket_flush_make = (const void *)apr_bucket_flush_make;
+const void *ap_hack_apr_bucket_immortal_create = (const void *)apr_bucket_immortal_create;
+const void *ap_hack_apr_bucket_immortal_make = (const void *)apr_bucket_immortal_make;
+const void *ap_hack_apr_bucket_transient_create = (const void *)apr_bucket_transient_create;
+const void *ap_hack_apr_bucket_transient_make = (const void *)apr_bucket_transient_make;
+const void *ap_hack_apr_bucket_heap_create = (const void *)apr_bucket_heap_create;
+const void *ap_hack_apr_bucket_heap_make = (const void *)apr_bucket_heap_make;
+const void *ap_hack_apr_bucket_pool_create = (const void *)apr_bucket_pool_create;
+const void *ap_hack_apr_bucket_pool_make = (const void *)apr_bucket_pool_make;
+#if APR_HAS_MMAP
+const void *ap_hack_apr_bucket_mmap_create = (const void *)apr_bucket_mmap_create;
+const void *ap_hack_apr_bucket_mmap_make = (const void *)apr_bucket_mmap_make;
+#endif
+const void *ap_hack_apr_bucket_socket_create = (const void *)apr_bucket_socket_create;
+const void *ap_hack_apr_bucket_socket_make = (const void *)apr_bucket_socket_make;
+const void *ap_hack_apr_bucket_pipe_create = (const void *)apr_bucket_pipe_create;
+const void *ap_hack_apr_bucket_pipe_make = (const void *)apr_bucket_pipe_make;
+const void *ap_hack_apr_bucket_file_create = (const void *)apr_bucket_file_create;
+const void *ap_hack_apr_bucket_file_make = (const void *)apr_bucket_file_make;
+const void *ap_hack_apr_bucket_file_enable_mmap = (const void *)apr_bucket_file_enable_mmap;
+const void *ap_hack_apr_bucket_file_set_buf_size = (const void *)apr_bucket_file_set_buf_size;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_crypto.h
+ */
+#if APU_HAVE_CRYPTO || defined(DOXYGEN)
+const void *ap_hack_apr_crypto_init = (const void *)apr_crypto_init;
+const void *ap_hack_apr_crypto_lib_version = (const void *)apr_crypto_lib_version;
+const void *ap_hack_apr_crypto_lib_init = (const void *)apr_crypto_lib_init;
+const void *ap_hack_apr_crypto_lib_term = (const void *)apr_crypto_lib_term;
+const void *ap_hack_apr_crypto_lib_is_active = (const void *)apr_crypto_lib_is_active;
+const void *ap_hack_apr_crypto_clear = (const void *)apr_crypto_clear;
+const void *ap_hack_apr_crypto_memzero = (const void *)apr_crypto_memzero;
+const void *ap_hack_apr_crypto_equals = (const void *)apr_crypto_equals;
+const void *ap_hack_apr_crypto_get_driver = (const void *)apr_crypto_get_driver;
+const void *ap_hack_apr_crypto_driver_name = (const void *)apr_crypto_driver_name;
+const void *ap_hack_apr_crypto_error = (const void *)apr_crypto_error;
+const void *ap_hack_apr_crypto_make = (const void *)apr_crypto_make;
+const void *ap_hack_apr_crypto_get_block_key_digests = (const void *)apr_crypto_get_block_key_digests;
+const void *ap_hack_apr_crypto_get_block_key_types = (const void *)apr_crypto_get_block_key_types;
+const void *ap_hack_apr_crypto_get_block_key_modes = (const void *)apr_crypto_get_block_key_modes;
+const void *ap_hack_apr_crypto_key_rec_make = (const void *)apr_crypto_key_rec_make;
+const void *ap_hack_apr_crypto_digest_rec_make = (const void *)apr_crypto_digest_rec_make;
+const void *ap_hack_apr_crypto_key = (const void *)apr_crypto_key;
+const void *ap_hack_apr_crypto_passphrase = (const void *)apr_crypto_passphrase;
+const void *ap_hack_apr_crypto_block_encrypt_init = (const void *)apr_crypto_block_encrypt_init;
+const void *ap_hack_apr_crypto_block_encrypt = (const void *)apr_crypto_block_encrypt;
+const void *ap_hack_apr_crypto_block_encrypt_finish = (const void *)apr_crypto_block_encrypt_finish;
+const void *ap_hack_apr_crypto_block_decrypt_init = (const void *)apr_crypto_block_decrypt_init;
+const void *ap_hack_apr_crypto_block_decrypt = (const void *)apr_crypto_block_decrypt;
+const void *ap_hack_apr_crypto_block_decrypt_finish = (const void *)apr_crypto_block_decrypt_finish;
+const void *ap_hack_apr_crypto_block_cleanup = (const void *)apr_crypto_block_cleanup;
+const void *ap_hack_apr_crypto_digest_init = (const void *)apr_crypto_digest_init;
+const void *ap_hack_apr_crypto_digest_update = (const void *)apr_crypto_digest_update;
+const void *ap_hack_apr_crypto_digest_final = (const void *)apr_crypto_digest_final;
+const void *ap_hack_apr_crypto_digest = (const void *)apr_crypto_digest;
+const void *ap_hack_apr_crypto_digest_cleanup = (const void *)apr_crypto_digest_cleanup;
+const void *ap_hack_apr_crypto_cleanup = (const void *)apr_crypto_cleanup;
+const void *ap_hack_apr_crypto_shutdown = (const void *)apr_crypto_shutdown;
+#if APU_HAVE_CRYPTO_PRNG
+const void *ap_hack_apr_crypto_prng_init = (const void *)apr_crypto_prng_init;
+const void *ap_hack_apr_crypto_prng_term = (const void *)apr_crypto_prng_term;
+const void *ap_hack_apr_crypto_random_bytes = (const void *)apr_crypto_random_bytes;
+#if APR_HAS_THREADS
+const void *ap_hack_apr_crypto_random_thread_bytes = (const void *)apr_crypto_random_thread_bytes;
+#endif
+const void *ap_hack_apr_crypto_prng_create = (const void *)apr_crypto_prng_create;
+const void *ap_hack_apr_crypto_prng_destroy = (const void *)apr_crypto_prng_destroy;
+const void *ap_hack_apr_crypto_prng_rekey = (const void *)apr_crypto_prng_rekey;
+const void *ap_hack_apr_crypto_prng_reseed = (const void *)apr_crypto_prng_reseed;
+#if APR_HAS_FORK
+const void *ap_hack_apr_crypto_prng_after_fork = (const void *)apr_crypto_prng_after_fork;
+#endif
+const void *ap_hack_apr_crypto_prng_bytes = (const void *)apr_crypto_prng_bytes;
+#endif /* APU_HAVE_CRYPTO_PRNG */
+#endif /* APU_HAVE_CRYPTO */
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_cstr.h
+ */
+const void *ap_hack_apr_cstr_split = (const void *)apr_cstr_split;
+const void *ap_hack_apr_cstr_split_append = (const void *)apr_cstr_split_append;
+const void *ap_hack_apr_cstr_match_glob_list = (const void *)apr_cstr_match_glob_list;
+const void *ap_hack_apr_cstr_match_list = (const void *)apr_cstr_match_list;
+const void *ap_hack_apr_cstr_tokenize = (const void *)apr_cstr_tokenize;
+const void *ap_hack_apr_cstr_count_newlines = (const void *)apr_cstr_count_newlines;
+#if 0 /* XXX: stringbuf logic is not present in APR */
+const void *ap_hack_apr_cstr_join = (const void *)apr_cstr_join;
+#endif
+const void *ap_hack_apr_cstr_casecmp = (const void *)apr_cstr_casecmp;
+const void *ap_hack_apr_cstr_casecmpn = (const void *)apr_cstr_casecmpn;
+const void *ap_hack_apr_cstr_strtoi64 = (const void *)apr_cstr_strtoi64;
+const void *ap_hack_apr_cstr_atoi64 = (const void *)apr_cstr_atoi64;
+const void *ap_hack_apr_cstr_atoi = (const void *)apr_cstr_atoi;
+const void *ap_hack_apr_cstr_strtoui64 = (const void *)apr_cstr_strtoui64;
+const void *ap_hack_apr_cstr_atoui64 = (const void *)apr_cstr_atoui64;
+const void *ap_hack_apr_cstr_atoui = (const void *)apr_cstr_atoui;
+const void *ap_hack_apr_cstr_skip_prefix = (const void *)apr_cstr_skip_prefix;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_date.h
+ */
+const void *ap_hack_apr_date_checkmask = (const void *)apr_date_checkmask;
+const void *ap_hack_apr_date_parse_http = (const void *)apr_date_parse_http;
+const void *ap_hack_apr_date_parse_rfc = (const void *)apr_date_parse_rfc;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_dbd.h
+ */
+const void *ap_hack_apr_dbd_init = (const void *)apr_dbd_init;
+const void *ap_hack_apr_dbd_get_driver = (const void *)apr_dbd_get_driver;
+const void *ap_hack_apr_dbd_open_ex = (const void *)apr_dbd_open_ex;
+const void *ap_hack_apr_dbd_open = (const void *)apr_dbd_open;
+const void *ap_hack_apr_dbd_close = (const void *)apr_dbd_close;
+const void *ap_hack_apr_dbd_name = (const void *)apr_dbd_name;
+const void *ap_hack_apr_dbd_native_handle = (const void *)apr_dbd_native_handle;
+const void *ap_hack_apr_dbd_check_conn = (const void *)apr_dbd_check_conn;
+const void *ap_hack_apr_dbd_set_dbname = (const void *)apr_dbd_set_dbname;
+const void *ap_hack_apr_dbd_transaction_start = (const void *)apr_dbd_transaction_start;
+const void *ap_hack_apr_dbd_transaction_end = (const void *)apr_dbd_transaction_end;
+const void *ap_hack_apr_dbd_transaction_mode_get = (const void *)apr_dbd_transaction_mode_get;
+const void *ap_hack_apr_dbd_transaction_mode_set = (const void *)apr_dbd_transaction_mode_set;
+const void *ap_hack_apr_dbd_query = (const void *)apr_dbd_query;
+const void *ap_hack_apr_dbd_select = (const void *)apr_dbd_select;
+const void *ap_hack_apr_dbd_num_cols = (const void *)apr_dbd_num_cols;
+const void *ap_hack_apr_dbd_num_tuples = (const void *)apr_dbd_num_tuples;
+const void *ap_hack_apr_dbd_get_row = (const void *)apr_dbd_get_row;
+const void *ap_hack_apr_dbd_get_entry = (const void *)apr_dbd_get_entry;
+const void *ap_hack_apr_dbd_get_name = (const void *)apr_dbd_get_name;
+const void *ap_hack_apr_dbd_error = (const void *)apr_dbd_error;
+const void *ap_hack_apr_dbd_escape = (const void *)apr_dbd_escape;
+const void *ap_hack_apr_dbd_prepare = (const void *)apr_dbd_prepare;
+const void *ap_hack_apr_dbd_pquery = (const void *)apr_dbd_pquery;
+const void *ap_hack_apr_dbd_pselect = (const void *)apr_dbd_pselect;
+const void *ap_hack_apr_dbd_pvquery = (const void *)apr_dbd_pvquery;
+const void *ap_hack_apr_dbd_pvselect = (const void *)apr_dbd_pvselect;
+const void *ap_hack_apr_dbd_pbquery = (const void *)apr_dbd_pbquery;
+const void *ap_hack_apr_dbd_pbselect = (const void *)apr_dbd_pbselect;
+const void *ap_hack_apr_dbd_pvbquery = (const void *)apr_dbd_pvbquery;
+const void *ap_hack_apr_dbd_pvbselect = (const void *)apr_dbd_pvbselect;
+const void *ap_hack_apr_dbd_datum_get = (const void *)apr_dbd_datum_get;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_dbm.h
+ */
+const void *ap_hack_apr_dbm_open_ex = (const void *)apr_dbm_open_ex;
+const void *ap_hack_apr_dbm_open = (const void *)apr_dbm_open;
+const void *ap_hack_apr_dbm_close = (const void *)apr_dbm_close;
+const void *ap_hack_apr_dbm_fetch = (const void *)apr_dbm_fetch;
+const void *ap_hack_apr_dbm_store = (const void *)apr_dbm_store;
+const void *ap_hack_apr_dbm_delete = (const void *)apr_dbm_delete;
+const void *ap_hack_apr_dbm_exists = (const void *)apr_dbm_exists;
+const void *ap_hack_apr_dbm_firstkey = (const void *)apr_dbm_firstkey;
+const void *ap_hack_apr_dbm_nextkey = (const void *)apr_dbm_nextkey;
+const void *ap_hack_apr_dbm_freedatum = (const void *)apr_dbm_freedatum;
+const void *ap_hack_apr_dbm_geterror = (const void *)apr_dbm_geterror;
+const void *ap_hack_apr_dbm_get_usednames_ex = (const void *)apr_dbm_get_usednames_ex;
+const void *ap_hack_apr_dbm_get_usednames = (const void *)apr_dbm_get_usednames;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_dso.h
+ */
+#if APR_HAS_DSO || defined(DOXYGEN)
+const void *ap_hack_apr_dso_load = (const void *)apr_dso_load;
+const void *ap_hack_apr_dso_unload = (const void *)apr_dso_unload;
+const void *ap_hack_apr_dso_sym = (const void *)apr_dso_sym;
+const void *ap_hack_apr_dso_error = (const void *)apr_dso_error;
+#endif /* APR_HAS_DSO */
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_encode.h
+ */
+const void *ap_hack_apr_encode_base64 = (const void *)apr_encode_base64;
+const void *ap_hack_apr_encode_base64_binary = (const void *)apr_encode_base64_binary;
+const void *ap_hack_apr_pencode_base64 = (const void *)apr_pencode_base64;
+const void *ap_hack_apr_pencode_base64_binary = (const void *)apr_pencode_base64_binary;
+const void *ap_hack_apr_decode_base64 = (const void *)apr_decode_base64;
+const void *ap_hack_apr_decode_base64_binary = (const void *)apr_decode_base64_binary;
+const void *ap_hack_apr_pdecode_base64 = (const void *)apr_pdecode_base64;
+const void *ap_hack_apr_pdecode_base64_binary = (const void *)apr_pdecode_base64_binary;
+const void *ap_hack_apr_encode_base32 = (const void *)apr_encode_base32;
+const void *ap_hack_apr_encode_base32_binary = (const void *)apr_encode_base32_binary;
+const void *ap_hack_apr_pencode_base32 = (const void *)apr_pencode_base32;
+const void *ap_hack_apr_pencode_base32_binary = (const void *)apr_pencode_base32_binary;
+const void *ap_hack_apr_decode_base32 = (const void *)apr_decode_base32;
+const void *ap_hack_apr_decode_base32_binary = (const void *)apr_decode_base32_binary;
+const void *ap_hack_apr_pdecode_base32 = (const void *)apr_pdecode_base32;
+const void *ap_hack_apr_pdecode_base32_binary = (const void *)apr_pdecode_base32_binary;
+const void *ap_hack_apr_encode_base16 = (const void *)apr_encode_base16;
+const void *ap_hack_apr_encode_base16_binary = (const void *)apr_encode_base16_binary;
+const void *ap_hack_apr_pencode_base16 = (const void *)apr_pencode_base16;
+const void *ap_hack_apr_pencode_base16_binary = (const void *)apr_pencode_base16_binary;
+const void *ap_hack_apr_decode_base16 = (const void *)apr_decode_base16;
+const void *ap_hack_apr_decode_base16_binary = (const void *)apr_decode_base16_binary;
+const void *ap_hack_apr_pdecode_base16 = (const void *)apr_pdecode_base16;
+const void *ap_hack_apr_pdecode_base16_binary = (const void *)apr_pdecode_base16_binary;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_env.h
+ */
+const void *ap_hack_apr_env_get = (const void *)apr_env_get;
+const void *ap_hack_apr_env_set = (const void *)apr_env_set;
+const void *ap_hack_apr_env_delete = (const void *)apr_env_delete;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_errno.h
+ */
+const void *ap_hack_apr_strerror = (const void *)apr_strerror;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_escape.h
+ */
+const void *ap_hack_apr_escape_shell = (const void *)apr_escape_shell;
+const void *ap_hack_apr_pescape_shell = (const void *)apr_pescape_shell;
+const void *ap_hack_apr_unescape_url = (const void *)apr_unescape_url;
+const void *ap_hack_apr_punescape_url = (const void *)apr_punescape_url;
+const void *ap_hack_apr_escape_path_segment = (const void *)apr_escape_path_segment;
+const void *ap_hack_apr_pescape_path_segment = (const void *)apr_pescape_path_segment;
+const void *ap_hack_apr_escape_path = (const void *)apr_escape_path;
+const void *ap_hack_apr_pescape_path = (const void *)apr_pescape_path;
+const void *ap_hack_apr_escape_urlencoded = (const void *)apr_escape_urlencoded;
+const void *ap_hack_apr_pescape_urlencoded = (const void *)apr_pescape_urlencoded;
+const void *ap_hack_apr_escape_entity = (const void *)apr_escape_entity;
+const void *ap_hack_apr_pescape_entity = (const void *)apr_pescape_entity;
+const void *ap_hack_apr_unescape_entity = (const void *)apr_unescape_entity;
+const void *ap_hack_apr_punescape_entity = (const void *)apr_punescape_entity;
+const void *ap_hack_apr_escape_echo = (const void *)apr_escape_echo;
+const void *ap_hack_apr_pescape_echo = (const void *)apr_pescape_echo;
+const void *ap_hack_apr_escape_hex = (const void *)apr_escape_hex;
+const void *ap_hack_apr_pescape_hex = (const void *)apr_pescape_hex;
+const void *ap_hack_apr_unescape_hex = (const void *)apr_unescape_hex;
+const void *ap_hack_apr_punescape_hex = (const void *)apr_punescape_hex;
+const void *ap_hack_apr_escape_ldap = (const void *)apr_escape_ldap;
+const void *ap_hack_apr_pescape_ldap = (const void *)apr_pescape_ldap;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_file_info.h
+ */
+const void *ap_hack_apr_stat = (const void *)apr_stat;
+const void *ap_hack_apr_dir_open = (const void *)apr_dir_open;
+const void *ap_hack_apr_dir_close = (const void *)apr_dir_close;
+const void *ap_hack_apr_dir_read = (const void *)apr_dir_read;
+const void *ap_hack_apr_dir_rewind = (const void *)apr_dir_rewind;
+const void *ap_hack_apr_filepath_root = (const void *)apr_filepath_root;
+const void *ap_hack_apr_filepath_merge = (const void *)apr_filepath_merge;
+const void *ap_hack_apr_filepath_list_split = (const void *)apr_filepath_list_split;
+const void *ap_hack_apr_filepath_list_merge = (const void *)apr_filepath_list_merge;
+const void *ap_hack_apr_filepath_get = (const void *)apr_filepath_get;
+const void *ap_hack_apr_filepath_set = (const void *)apr_filepath_set;
+const void *ap_hack_apr_filepath_encoding = (const void *)apr_filepath_encoding;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_file_io.h
+ */
+const void *ap_hack_apr_file_open = (const void *)apr_file_open;
+const void *ap_hack_apr_file_close = (const void *)apr_file_close;
+const void *ap_hack_apr_file_remove = (const void *)apr_file_remove;
+const void *ap_hack_apr_file_rename = (const void *)apr_file_rename;
+const void *ap_hack_apr_file_link = (const void *)apr_file_link;
+const void *ap_hack_apr_file_copy = (const void *)apr_file_copy;
+const void *ap_hack_apr_file_append = (const void *)apr_file_append;
+const void *ap_hack_apr_file_eof = (const void *)apr_file_eof;
+const void *ap_hack_apr_file_open_stderr = (const void *)apr_file_open_stderr;
+const void *ap_hack_apr_file_open_stdout = (const void *)apr_file_open_stdout;
+const void *ap_hack_apr_file_open_stdin = (const void *)apr_file_open_stdin;
+const void *ap_hack_apr_file_open_flags_stderr = (const void *)apr_file_open_flags_stderr;
+const void *ap_hack_apr_file_open_flags_stdout = (const void *)apr_file_open_flags_stdout;
+const void *ap_hack_apr_file_open_flags_stdin = (const void *)apr_file_open_flags_stdin;
+const void *ap_hack_apr_file_read = (const void *)apr_file_read;
+const void *ap_hack_apr_file_write = (const void *)apr_file_write;
+const void *ap_hack_apr_file_writev = (const void *)apr_file_writev;
+const void *ap_hack_apr_file_read_full = (const void *)apr_file_read_full;
+const void *ap_hack_apr_file_write_full = (const void *)apr_file_write_full;
+const void *ap_hack_apr_file_writev_full = (const void *)apr_file_writev_full;
+const void *ap_hack_apr_file_putc = (const void *)apr_file_putc;
+const void *ap_hack_apr_file_getc = (const void *)apr_file_getc;
+const void *ap_hack_apr_file_ungetc = (const void *)apr_file_ungetc;
+const void *ap_hack_apr_file_gets = (const void *)apr_file_gets;
+const void *ap_hack_apr_file_puts = (const void *)apr_file_puts;
+const void *ap_hack_apr_file_pipe_wait = (const void *)apr_file_pipe_wait;
+const void *ap_hack_apr_file_flush = (const void *)apr_file_flush;
+const void *ap_hack_apr_file_sync = (const void *)apr_file_sync;
+const void *ap_hack_apr_file_datasync = (const void *)apr_file_datasync;
+const void *ap_hack_apr_file_dup = (const void *)apr_file_dup;
+const void *ap_hack_apr_file_dup2 = (const void *)apr_file_dup2;
+const void *ap_hack_apr_file_setaside = (const void *)apr_file_setaside;
+const void *ap_hack_apr_file_buffer_set = (const void *)apr_file_buffer_set;
+const void *ap_hack_apr_file_buffer_size_get = (const void *)apr_file_buffer_size_get;
+const void *ap_hack_apr_file_seek = (const void *)apr_file_seek;
+const void *ap_hack_apr_file_pipe_create = (const void *)apr_file_pipe_create;
+const void *ap_hack_apr_file_pipe_create_ex = (const void *)apr_file_pipe_create_ex;
+const void *ap_hack_apr_file_pipe_create_pools = (const void *)apr_file_pipe_create_pools;
+const void *ap_hack_apr_file_namedpipe_create = (const void *)apr_file_namedpipe_create;
+const void *ap_hack_apr_file_pipe_timeout_get = (const void *)apr_file_pipe_timeout_get;
+const void *ap_hack_apr_file_pipe_timeout_set = (const void *)apr_file_pipe_timeout_set;
+const void *ap_hack_apr_file_lock = (const void *)apr_file_lock;
+const void *ap_hack_apr_file_unlock = (const void *)apr_file_unlock;
+const void *ap_hack_apr_file_name_get = (const void *)apr_file_name_get;
+const void *ap_hack_apr_file_data_get = (const void *)apr_file_data_get;
+const void *ap_hack_apr_file_data_set = (const void *)apr_file_data_set;
+const void *ap_hack_apr_file_printf = (const void *)apr_file_printf;
+const void *ap_hack_apr_file_perms_set = (const void *)apr_file_perms_set;
+const void *ap_hack_apr_file_attrs_set = (const void *)apr_file_attrs_set;
+const void *ap_hack_apr_file_mtime_set = (const void *)apr_file_mtime_set;
+const void *ap_hack_apr_dir_make = (const void *)apr_dir_make;
+const void *ap_hack_apr_dir_make_recursive = (const void *)apr_dir_make_recursive;
+const void *ap_hack_apr_dir_remove = (const void *)apr_dir_remove;
+const void *ap_hack_apr_file_info_get = (const void *)apr_file_info_get;
+const void *ap_hack_apr_file_trunc = (const void *)apr_file_trunc;
+const void *ap_hack_apr_file_flags_get = (const void *)apr_file_flags_get;
+const void *ap_hack_apr_file_pool_get = (const void *)apr_file_pool_get;
+const void *ap_hack_apr_file_inherit_set = (const void *)apr_file_inherit_set;
+const void *ap_hack_apr_file_inherit_unset = (const void *)apr_file_inherit_unset;
+const void *ap_hack_apr_file_mktemp = (const void *)apr_file_mktemp;
+const void *ap_hack_apr_temp_dir_get = (const void *)apr_temp_dir_get;
+const void *ap_hack_apr_file_rotating_check = (const void *)apr_file_rotating_check;
+const void *ap_hack_apr_file_rotating_manual_check = (const void *)apr_file_rotating_manual_check;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_fnmatch.h
+ */
+const void *ap_hack_apr_fnmatch = (const void *)apr_fnmatch;
+const void *ap_hack_apr_fnmatch_test = (const void *)apr_fnmatch_test;
+const void *ap_hack_apr_match_glob = (const void *)apr_match_glob;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_general.h
+ */
+const void *ap_hack_apr_initialize = (const void *)apr_initialize;
+const void *ap_hack_apr_app_initialize = (const void *)apr_app_initialize;
+const void *ap_hack_apr_terminate = (const void *)apr_terminate;
+const void *ap_hack_apr_terminate2 = (const void *)apr_terminate2;
+#if APR_HAS_RANDOM || defined(DOXYGEN)
+const void *ap_hack_apr_generate_random_bytes = (const void *)apr_generate_random_bytes;
+#endif
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_getopt.h
+ */
+const void *ap_hack_apr_getopt_init = (const void *)apr_getopt_init;
+const void *ap_hack_apr_getopt = (const void *)apr_getopt;
+const void *ap_hack_apr_getopt_long = (const void *)apr_getopt_long;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_global_mutex.h
+ */
+#if !APR_PROC_MUTEX_IS_GLOBAL || defined(DOXYGEN)
+const void *ap_hack_apr_global_mutex_create = (const void *)apr_global_mutex_create;
+const void *ap_hack_apr_global_mutex_child_init = (const void *)apr_global_mutex_child_init;
+const void *ap_hack_apr_global_mutex_lock = (const void *)apr_global_mutex_lock;
+const void *ap_hack_apr_global_mutex_trylock = (const void *)apr_global_mutex_trylock;
+const void *ap_hack_apr_global_mutex_timedlock = (const void *)apr_global_mutex_timedlock;
+const void *ap_hack_apr_global_mutex_unlock = (const void *)apr_global_mutex_unlock;
+const void *ap_hack_apr_global_mutex_destroy = (const void *)apr_global_mutex_destroy;
+const void *ap_hack_apr_global_mutex_lockfile = (const void *)apr_global_mutex_lockfile;
+const void *ap_hack_apr_global_mutex_mech = (const void *)apr_global_mutex_mech;
+const void *ap_hack_apr_global_mutex_name = (const void *)apr_global_mutex_name;
+const void *ap_hack_apr_global_mutex_pool_get = (const void *)apr_global_mutex_pool_get;
+#else /* APR_PROC_MUTEX_IS_GLOBAL */
+#endif
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_hash.h
+ */
+const void *ap_hack_apr_hashfunc_default = (const void *)apr_hashfunc_default;
+const void *ap_hack_apr_hash_make = (const void *)apr_hash_make;
+const void *ap_hack_apr_hash_make_custom = (const void *)apr_hash_make_custom;
+const void *ap_hack_apr_hash_copy = (const void *)apr_hash_copy;
+const void *ap_hack_apr_hash_set = (const void *)apr_hash_set;
+const void *ap_hack_apr_hash_get = (const void *)apr_hash_get;
+const void *ap_hack_apr_hash_get_or_set = (const void *)apr_hash_get_or_set;
+const void *ap_hack_apr_hash_first = (const void *)apr_hash_first;
+const void *ap_hack_apr_hash_next = (const void *)apr_hash_next;
+const void *ap_hack_apr_hash_this = (const void *)apr_hash_this;
+const void *ap_hack_apr_hash_this_key = (const void *)apr_hash_this_key;
+const void *ap_hack_apr_hash_this_key_len = (const void *)apr_hash_this_key_len;
+const void *ap_hack_apr_hash_this_val = (const void *)apr_hash_this_val;
+const void *ap_hack_apr_hash_count = (const void *)apr_hash_count;
+const void *ap_hack_apr_hash_clear = (const void *)apr_hash_clear;
+const void *ap_hack_apr_hash_overlay = (const void *)apr_hash_overlay;
+const void *ap_hack_apr_hash_merge = (const void *)apr_hash_merge;
+const void *ap_hack_apr_hash_do = (const void *)apr_hash_do;
+const void *ap_hack_apr_hash_pool_get = (const void *)apr_hash_pool_get;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_hooks.h
+ */
+const void *ap_hack_apr_hook_sort_register = (const void *)apr_hook_sort_register;
+const void *ap_hack_apr_hook_sort_all = (const void *)apr_hook_sort_all;
+const void *ap_hack_apr_hook_debug_show = (const void *)apr_hook_debug_show;
+const void *ap_hack_apr_hook_deregister_all = (const void *)apr_hook_deregister_all;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_jose.h
+ */
+const void *ap_hack_apr_jose_error = (const void *)apr_jose_error;
+const void *ap_hack_apr_jose_make = (const void *)apr_jose_make;
+const void *ap_hack_apr_jose_jwk_make = (const void *)apr_jose_jwk_make;
+const void *ap_hack_apr_jose_jwks_make = (const void *)apr_jose_jwks_make;
+const void *ap_hack_apr_jose_signature_make = (const void *)apr_jose_signature_make;
+const void *ap_hack_apr_jose_recipient_make = (const void *)apr_jose_recipient_make;
+const void *ap_hack_apr_jose_encryption_make = (const void *)apr_jose_encryption_make;
+const void *ap_hack_apr_jose_jwe_make = (const void *)apr_jose_jwe_make;
+const void *ap_hack_apr_jose_jwe_json_make = (const void *)apr_jose_jwe_json_make;
+const void *ap_hack_apr_jose_jws_make = (const void *)apr_jose_jws_make;
+const void *ap_hack_apr_jose_jws_json_make = (const void *)apr_jose_jws_json_make;
+const void *ap_hack_apr_jose_jwt_make = (const void *)apr_jose_jwt_make;
+const void *ap_hack_apr_jose_data_make = (const void *)apr_jose_data_make;
+const void *ap_hack_apr_jose_text_make = (const void *)apr_jose_text_make;
+const void *ap_hack_apr_jose_json_make = (const void *)apr_jose_json_make;
+const void *ap_hack_apr_jose_encode = (const void *)apr_jose_encode;
+const void *ap_hack_apr_jose_decode = (const void *)apr_jose_decode;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_json.h
+ */
+const void *ap_hack_apr_json_value_create = (const void *)apr_json_value_create;
+const void *ap_hack_apr_json_object_create = (const void *)apr_json_object_create;
+const void *ap_hack_apr_json_object_set = (const void *)apr_json_object_set;
+const void *ap_hack_apr_json_object_set_ex = (const void *)apr_json_object_set_ex;
+const void *ap_hack_apr_json_object_first = (const void *)apr_json_object_first;
+const void *ap_hack_apr_json_object_next = (const void *)apr_json_object_next;
+const void *ap_hack_apr_json_array_add = (const void *)apr_json_array_add;
+const void *ap_hack_apr_json_array_first = (const void *)apr_json_array_first;
+const void *ap_hack_apr_json_array_next = (const void *)apr_json_array_next;
+const void *ap_hack_apr_json_decode = (const void *)apr_json_decode;
+const void *ap_hack_apr_json_encode = (const void *)apr_json_encode;
+const void *ap_hack_apr_json_overlay = (const void *)apr_json_overlay;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_lib.h
+ */
+const void *ap_hack_apr_filepath_name_get = (const void *)apr_filepath_name_get;
+const void *ap_hack_apr_vformatter = (const void *)apr_vformatter;
+const void *ap_hack_apr_password_get = (const void *)apr_password_get;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_md4.h
+ */
+const void *ap_hack_apr_md4_init = (const void *)apr_md4_init;
+#if APR_HAS_XLATE
+const void *ap_hack_apr_md4_set_xlate = (const void *)apr_md4_set_xlate;
+#else
+#endif
+const void *ap_hack_apr_md4_update = (const void *)apr_md4_update;
+const void *ap_hack_apr_md4_final = (const void *)apr_md4_final;
+const void *ap_hack_apr_md4 = (const void *)apr_md4;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_md5.h
+ */
+const void *ap_hack_apr_md5_init = (const void *)apr_md5_init;
+const void *ap_hack_apr_md5_set_xlate = (const void *)apr_md5_set_xlate;
+const void *ap_hack_apr_md5_update = (const void *)apr_md5_update;
+const void *ap_hack_apr_md5_final = (const void *)apr_md5_final;
+const void *ap_hack_apr_md5 = (const void *)apr_md5;
+const void *ap_hack_apr_md5_encode = (const void *)apr_md5_encode;
+const void *ap_hack_apr_bcrypt_encode = (const void *)apr_bcrypt_encode;
+const void *ap_hack_apr_password_validate = (const void *)apr_password_validate;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_memcache.h
+ */
+const void *ap_hack_apr_memcache_hash = (const void *)apr_memcache_hash;
+const void *ap_hack_apr_memcache_hash_crc32 = (const void *)apr_memcache_hash_crc32;
+const void *ap_hack_apr_memcache_hash_default = (const void *)apr_memcache_hash_default;
+const void *ap_hack_apr_memcache_find_server_hash = (const void *)apr_memcache_find_server_hash;
+const void *ap_hack_apr_memcache_add_server = (const void *)apr_memcache_add_server;
+const void *ap_hack_apr_memcache_find_server = (const void *)apr_memcache_find_server;
+const void *ap_hack_apr_memcache_enable_server = (const void *)apr_memcache_enable_server;
+const void *ap_hack_apr_memcache_disable_server = (const void *)apr_memcache_disable_server;
+const void *ap_hack_apr_memcache_server_create = (const void *)apr_memcache_server_create;
+const void *ap_hack_apr_memcache_create = (const void *)apr_memcache_create;
+const void *ap_hack_apr_memcache_getp = (const void *)apr_memcache_getp;
+const void *ap_hack_apr_memcache_add_multget_key = (const void *)apr_memcache_add_multget_key;
+const void *ap_hack_apr_memcache_multgetp = (const void *)apr_memcache_multgetp;
+const void *ap_hack_apr_memcache_set = (const void *)apr_memcache_set;
+const void *ap_hack_apr_memcache_add = (const void *)apr_memcache_add;
+const void *ap_hack_apr_memcache_replace = (const void *)apr_memcache_replace;
+const void *ap_hack_apr_memcache_delete = (const void *)apr_memcache_delete;
+const void *ap_hack_apr_memcache_incr = (const void *)apr_memcache_incr;
+const void *ap_hack_apr_memcache_decr = (const void *)apr_memcache_decr;
+const void *ap_hack_apr_memcache_version = (const void *)apr_memcache_version;
+const void *ap_hack_apr_memcache_stats = (const void *)apr_memcache_stats;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_mmap.h
+ */
+#if APR_HAS_MMAP || defined(DOXYGEN)
+const void *ap_hack_apr_mmap_create = (const void *)apr_mmap_create;
+const void *ap_hack_apr_mmap_dup = (const void *)apr_mmap_dup;
+const void *ap_hack_apr_mmap_delete = (const void *)apr_mmap_delete;
+const void *ap_hack_apr_mmap_offset = (const void *)apr_mmap_offset;
+#endif /* APR_HAS_MMAP */
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_network_io.h
+ */
+const void *ap_hack_apr_socket_create = (const void *)apr_socket_create;
+const void *ap_hack_apr_socket_shutdown = (const void *)apr_socket_shutdown;
+const void *ap_hack_apr_socket_close = (const void *)apr_socket_close;
+const void *ap_hack_apr_socket_bind = (const void *)apr_socket_bind;
+const void *ap_hack_apr_socket_listen = (const void *)apr_socket_listen;
+const void *ap_hack_apr_socket_accept = (const void *)apr_socket_accept;
+const void *ap_hack_apr_socket_connect = (const void *)apr_socket_connect;
+const void *ap_hack_apr_socket_atreadeof = (const void *)apr_socket_atreadeof;
+const void *ap_hack_apr_sockaddr_info_get = (const void *)apr_sockaddr_info_get;
+const void *ap_hack_apr_sockaddr_info_copy = (const void *)apr_sockaddr_info_copy;
+const void *ap_hack_apr_sockaddr_zone_set = (const void *)apr_sockaddr_zone_set;
+const void *ap_hack_apr_sockaddr_zone_get = (const void *)apr_sockaddr_zone_get;
+const void *ap_hack_apr_getnameinfo = (const void *)apr_getnameinfo;
+const void *ap_hack_apr_parse_addr_port = (const void *)apr_parse_addr_port;
+const void *ap_hack_apr_gethostname = (const void *)apr_gethostname;
+const void *ap_hack_apr_socket_data_get = (const void *)apr_socket_data_get;
+const void *ap_hack_apr_socket_data_set = (const void *)apr_socket_data_set;
+const void *ap_hack_apr_socket_send = (const void *)apr_socket_send;
+const void *ap_hack_apr_socket_sendv = (const void *)apr_socket_sendv;
+const void *ap_hack_apr_socket_sendto = (const void *)apr_socket_sendto;
+const void *ap_hack_apr_socket_recvfrom = (const void *)apr_socket_recvfrom;
+#if APR_HAS_SENDFILE || defined(DOXYGEN)
+const void *ap_hack_apr_socket_sendfile = (const void *)apr_socket_sendfile;
+#endif /* APR_HAS_SENDFILE */
+const void *ap_hack_apr_socket_recv = (const void *)apr_socket_recv;
+const void *ap_hack_apr_socket_wait = (const void *)apr_socket_wait;
+const void *ap_hack_apr_socket_opt_set = (const void *)apr_socket_opt_set;
+const void *ap_hack_apr_socket_timeout_set = (const void *)apr_socket_timeout_set;
+const void *ap_hack_apr_socket_opt_get = (const void *)apr_socket_opt_get;
+const void *ap_hack_apr_socket_timeout_get = (const void *)apr_socket_timeout_get;
+const void *ap_hack_apr_socket_atmark = (const void *)apr_socket_atmark;
+const void *ap_hack_apr_socket_addr_get = (const void *)apr_socket_addr_get;
+const void *ap_hack_apr_sockaddr_ip_get = (const void *)apr_sockaddr_ip_get;
+const void *ap_hack_apr_sockaddr_ip_getbuf = (const void *)apr_sockaddr_ip_getbuf;
+const void *ap_hack_apr_sockaddr_equal = (const void *)apr_sockaddr_equal;
+const void *ap_hack_apr_sockaddr_is_wildcard = (const void *)apr_sockaddr_is_wildcard;
+const void *ap_hack_apr_socket_type_get = (const void *)apr_socket_type_get;
+const void *ap_hack_apr_getservbyname = (const void *)apr_getservbyname;
+const void *ap_hack_apr_ipsubnet_create = (const void *)apr_ipsubnet_create;
+const void *ap_hack_apr_ipsubnet_test = (const void *)apr_ipsubnet_test;
+const void *ap_hack_apr_socket_protocol_get = (const void *)apr_socket_protocol_get;
+const void *ap_hack_apr_socket_pool_get = (const void *)apr_socket_pool_get;
+const void *ap_hack_apr_socket_inherit_set = (const void *)apr_socket_inherit_set;
+const void *ap_hack_apr_socket_inherit_unset = (const void *)apr_socket_inherit_unset;
+const void *ap_hack_apr_mcast_join = (const void *)apr_mcast_join;
+const void *ap_hack_apr_mcast_leave = (const void *)apr_mcast_leave;
+const void *ap_hack_apr_mcast_hops = (const void *)apr_mcast_hops;
+const void *ap_hack_apr_mcast_loopback = (const void *)apr_mcast_loopback;
+const void *ap_hack_apr_mcast_interface = (const void *)apr_mcast_interface;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_optional.h
+ */
+const void *ap_hack_apr_dynamic_fn_register = (const void *)apr_dynamic_fn_register;
+const void *ap_hack_apr_dynamic_fn_retrieve = (const void *)apr_dynamic_fn_retrieve;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_optional_hooks.h
+ */
+const void *ap_hack_apr_optional_hook_add = (const void *)apr_optional_hook_add;
+const void *ap_hack_apr_optional_hook_get = (const void *)apr_optional_hook_get;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_poll.h
+ */
+const void *ap_hack_apr_pollset_create = (const void *)apr_pollset_create;
+const void *ap_hack_apr_pollset_create_ex = (const void *)apr_pollset_create_ex;
+const void *ap_hack_apr_pollset_destroy = (const void *)apr_pollset_destroy;
+const void *ap_hack_apr_pollset_add = (const void *)apr_pollset_add;
+const void *ap_hack_apr_pollset_remove = (const void *)apr_pollset_remove;
+const void *ap_hack_apr_pollset_poll = (const void *)apr_pollset_poll;
+const void *ap_hack_apr_pollset_wakeup = (const void *)apr_pollset_wakeup;
+const void *ap_hack_apr_poll = (const void *)apr_poll;
+const void *ap_hack_apr_pollset_method_name = (const void *)apr_pollset_method_name;
+const void *ap_hack_apr_poll_method_defname = (const void *)apr_poll_method_defname;
+const void *ap_hack_apr_pollcb_create = (const void *)apr_pollcb_create;
+const void *ap_hack_apr_pollcb_create_ex = (const void *)apr_pollcb_create_ex;
+const void *ap_hack_apr_pollcb_add = (const void *)apr_pollcb_add;
+const void *ap_hack_apr_pollcb_remove = (const void *)apr_pollcb_remove;
+const void *ap_hack_apr_pollcb_poll = (const void *)apr_pollcb_poll;
+const void *ap_hack_apr_pollcb_wakeup = (const void *)apr_pollcb_wakeup;
+const void *ap_hack_apr_pollcb_method_name = (const void *)apr_pollcb_method_name;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_pools.h
+ */
+const void *ap_hack_apr_pool_initialize = (const void *)apr_pool_initialize;
+const void *ap_hack_apr_pool_terminate = (const void *)apr_pool_terminate;
+const void *ap_hack_apr_pool_create_ex = (const void *)apr_pool_create_ex;
+const void *ap_hack_apr_pool_create_unmanaged_ex = (const void *)apr_pool_create_unmanaged_ex;
+const void *ap_hack_apr_pool_create_ex_debug = (const void *)apr_pool_create_ex_debug;
+const void *ap_hack_apr_pool_create_unmanaged_ex_debug = (const void *)apr_pool_create_unmanaged_ex_debug;
+#if defined(DOXYGEN)
+const void *ap_hack_apr_pool_create = (const void *)apr_pool_create;
+#else
+#endif
+#if defined(DOXYGEN)
+const void *ap_hack_apr_pool_create_unmanaged = (const void *)apr_pool_create_unmanaged;
+#else
+#endif
+const void *ap_hack_apr_pool_allocator_get = (const void *)apr_pool_allocator_get;
+const void *ap_hack_apr_pool_clear = (const void *)apr_pool_clear;
+const void *ap_hack_apr_pool_clear_debug = (const void *)apr_pool_clear_debug;
+const void *ap_hack_apr_pool_destroy = (const void *)apr_pool_destroy;
+const void *ap_hack_apr_pool_destroy_debug = (const void *)apr_pool_destroy_debug;
+const void *ap_hack_apr_palloc = (const void *)apr_palloc;
+const void *ap_hack_apr_palloc_debug = (const void *)apr_palloc_debug;
+#if defined(DOXYGEN)
+const void *ap_hack_apr_pcalloc = (const void *)apr_pcalloc;
+#elif !APR_POOL_DEBUG
+#endif
+const void *ap_hack_apr_pcalloc_debug = (const void *)apr_pcalloc_debug;
+const void *ap_hack_apr_pool_abort_set = (const void *)apr_pool_abort_set;
+const void *ap_hack_apr_pool_abort_get = (const void *)apr_pool_abort_get;
+const void *ap_hack_apr_pool_parent_get = (const void *)apr_pool_parent_get;
+const void *ap_hack_apr_pool_is_ancestor = (const void *)apr_pool_is_ancestor;
+const void *ap_hack_apr_pool_tag = (const void *)apr_pool_tag;
+const void *ap_hack_apr_pool_get_tag = (const void *)apr_pool_get_tag;
+const void *ap_hack_apr_pool_userdata_set = (const void *)apr_pool_userdata_set;
+const void *ap_hack_apr_pool_userdata_setn = (const void *)apr_pool_userdata_setn;
+const void *ap_hack_apr_pool_userdata_get = (const void *)apr_pool_userdata_get;
+const void *ap_hack_apr_pool_cleanup_register = (const void *)apr_pool_cleanup_register;
+const void *ap_hack_apr_pool_pre_cleanup_register = (const void *)apr_pool_pre_cleanup_register;
+const void *ap_hack_apr_pool_cleanup_kill = (const void *)apr_pool_cleanup_kill;
+const void *ap_hack_apr_pool_child_cleanup_set = (const void *)apr_pool_child_cleanup_set;
+const void *ap_hack_apr_pool_cleanup_run = (const void *)apr_pool_cleanup_run;
+const void *ap_hack_apr_pool_cleanup_null = (const void *)apr_pool_cleanup_null;
+const void *ap_hack_apr_pool_cleanup_for_exec = (const void *)apr_pool_cleanup_for_exec;
+const void *ap_hack_apr_pool_owner_set = (const void *)apr_pool_owner_set;
+const void *ap_hack_apr_pool_join = (const void *)apr_pool_join;
+const void *ap_hack_apr_pool_find = (const void *)apr_pool_find;
+const void *ap_hack_apr_pool_num_bytes = (const void *)apr_pool_num_bytes;
+const void *ap_hack_apr_pool_lock = (const void *)apr_pool_lock;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_portable.h
+ */
+#if APR_PROC_MUTEX_IS_GLOBAL || defined(DOXYGEN)
+#else
+const void *ap_hack_apr_os_global_mutex_get = (const void *)apr_os_global_mutex_get;
+#endif
+const void *ap_hack_apr_os_file_get = (const void *)apr_os_file_get;
+const void *ap_hack_apr_os_dir_get = (const void *)apr_os_dir_get;
+const void *ap_hack_apr_os_sock_get = (const void *)apr_os_sock_get;
+const void *ap_hack_apr_os_proc_mutex_get = (const void *)apr_os_proc_mutex_get;
+const void *ap_hack_apr_os_proc_mutex_get_ex = (const void *)apr_os_proc_mutex_get_ex;
+const void *ap_hack_apr_os_exp_time_get = (const void *)apr_os_exp_time_get;
+const void *ap_hack_apr_os_imp_time_get = (const void *)apr_os_imp_time_get;
+const void *ap_hack_apr_os_shm_get = (const void *)apr_os_shm_get;
+#if APR_HAS_THREADS || defined(DOXYGEN)
+const void *ap_hack_apr_os_thread_get = (const void *)apr_os_thread_get;
+const void *ap_hack_apr_os_threadkey_get = (const void *)apr_os_threadkey_get;
+const void *ap_hack_apr_os_thread_put = (const void *)apr_os_thread_put;
+const void *ap_hack_apr_os_threadkey_put = (const void *)apr_os_threadkey_put;
+const void *ap_hack_apr_os_thread_current = (const void *)apr_os_thread_current;
+const void *ap_hack_apr_os_thread_equal = (const void *)apr_os_thread_equal;
+#endif /* APR_HAS_THREADS */
+const void *ap_hack_apr_os_file_put = (const void *)apr_os_file_put;
+const void *ap_hack_apr_os_pipe_put = (const void *)apr_os_pipe_put;
+const void *ap_hack_apr_os_pipe_put_ex = (const void *)apr_os_pipe_put_ex;
+const void *ap_hack_apr_os_dir_put = (const void *)apr_os_dir_put;
+const void *ap_hack_apr_os_sock_put = (const void *)apr_os_sock_put;
+const void *ap_hack_apr_os_sock_make = (const void *)apr_os_sock_make;
+const void *ap_hack_apr_os_proc_mutex_put = (const void *)apr_os_proc_mutex_put;
+const void *ap_hack_apr_os_proc_mutex_put_ex = (const void *)apr_os_proc_mutex_put_ex;
+const void *ap_hack_apr_os_imp_time_put = (const void *)apr_os_imp_time_put;
+const void *ap_hack_apr_os_exp_time_put = (const void *)apr_os_exp_time_put;
+const void *ap_hack_apr_os_shm_put = (const void *)apr_os_shm_put;
+#if APR_HAS_DSO || defined(DOXYGEN)
+const void *ap_hack_apr_os_dso_handle_put = (const void *)apr_os_dso_handle_put;
+const void *ap_hack_apr_os_dso_handle_get = (const void *)apr_os_dso_handle_get;
+#endif /* APR_HAS_DSO */
+#if APR_HAS_OS_UUID
+const void *ap_hack_apr_os_uuid_get = (const void *)apr_os_uuid_get;
+#endif
+const void *ap_hack_apr_os_default_encoding = (const void *)apr_os_default_encoding;
+const void *ap_hack_apr_os_locale_encoding = (const void *)apr_os_locale_encoding;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_proc_mutex.h
+ */
+const void *ap_hack_apr_proc_mutex_create = (const void *)apr_proc_mutex_create;
+const void *ap_hack_apr_proc_mutex_child_init = (const void *)apr_proc_mutex_child_init;
+const void *ap_hack_apr_proc_mutex_lock = (const void *)apr_proc_mutex_lock;
+const void *ap_hack_apr_proc_mutex_trylock = (const void *)apr_proc_mutex_trylock;
+const void *ap_hack_apr_proc_mutex_timedlock = (const void *)apr_proc_mutex_timedlock;
+const void *ap_hack_apr_proc_mutex_unlock = (const void *)apr_proc_mutex_unlock;
+const void *ap_hack_apr_proc_mutex_destroy = (const void *)apr_proc_mutex_destroy;
+const void *ap_hack_apr_proc_mutex_cleanup = (const void *)apr_proc_mutex_cleanup;
+const void *ap_hack_apr_proc_mutex_lockfile = (const void *)apr_proc_mutex_lockfile;
+const void *ap_hack_apr_proc_mutex_mech = (const void *)apr_proc_mutex_mech;
+const void *ap_hack_apr_proc_mutex_name = (const void *)apr_proc_mutex_name;
+const void *ap_hack_apr_proc_mutex_defname = (const void *)apr_proc_mutex_defname;
+const void *ap_hack_apr_proc_mutex_pool_get = (const void *)apr_proc_mutex_pool_get;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_queue.h
+ */
+#if APR_HAS_THREADS
+const void *ap_hack_apr_queue_create = (const void *)apr_queue_create;
+const void *ap_hack_apr_queue_push = (const void *)apr_queue_push;
+const void *ap_hack_apr_queue_pop = (const void *)apr_queue_pop;
+const void *ap_hack_apr_queue_trypush = (const void *)apr_queue_trypush;
+const void *ap_hack_apr_queue_trypop = (const void *)apr_queue_trypop;
+const void *ap_hack_apr_queue_timedpush = (const void *)apr_queue_timedpush;
+const void *ap_hack_apr_queue_timedpop = (const void *)apr_queue_timedpop;
+const void *ap_hack_apr_queue_size = (const void *)apr_queue_size;
+const void *ap_hack_apr_queue_interrupt_all = (const void *)apr_queue_interrupt_all;
+const void *ap_hack_apr_queue_term = (const void *)apr_queue_term;
+#endif /* APR_HAS_THREADS */
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_random.h
+ */
+const void *ap_hack_apr_crypto_sha256_new = (const void *)apr_crypto_sha256_new;
+const void *ap_hack_apr_random_init = (const void *)apr_random_init;
+const void *ap_hack_apr_random_standard_new = (const void *)apr_random_standard_new;
+const void *ap_hack_apr_random_add_entropy = (const void *)apr_random_add_entropy;
+const void *ap_hack_apr_random_insecure_bytes = (const void *)apr_random_insecure_bytes;
+const void *ap_hack_apr_random_secure_bytes = (const void *)apr_random_secure_bytes;
+const void *ap_hack_apr_random_barrier = (const void *)apr_random_barrier;
+const void *ap_hack_apr_random_secure_ready = (const void *)apr_random_secure_ready;
+const void *ap_hack_apr_random_insecure_ready = (const void *)apr_random_insecure_ready;
+const void *ap_hack_apr_random_after_fork = (const void *)apr_random_after_fork;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_redis.h
+ */
+const void *ap_hack_apr_redis_hash = (const void *)apr_redis_hash;
+const void *ap_hack_apr_redis_hash_crc32 = (const void *)apr_redis_hash_crc32;
+const void *ap_hack_apr_redis_hash_default = (const void *)apr_redis_hash_default;
+const void *ap_hack_apr_redis_find_server_hash = (const void *)apr_redis_find_server_hash;
+const void *ap_hack_apr_redis_find_server_hash_default = (const void *)apr_redis_find_server_hash_default;
+const void *ap_hack_apr_redis_add_server = (const void *)apr_redis_add_server;
+const void *ap_hack_apr_redis_find_server = (const void *)apr_redis_find_server;
+const void *ap_hack_apr_redis_enable_server = (const void *)apr_redis_enable_server;
+const void *ap_hack_apr_redis_disable_server = (const void *)apr_redis_disable_server;
+const void *ap_hack_apr_redis_server_create = (const void *)apr_redis_server_create;
+const void *ap_hack_apr_redis_create = (const void *)apr_redis_create;
+const void *ap_hack_apr_redis_getp = (const void *)apr_redis_getp;
+const void *ap_hack_apr_redis_set = (const void *)apr_redis_set;
+const void *ap_hack_apr_redis_setex = (const void *)apr_redis_setex;
+const void *ap_hack_apr_redis_delete = (const void *)apr_redis_delete;
+const void *ap_hack_apr_redis_version = (const void *)apr_redis_version;
+const void *ap_hack_apr_redis_info = (const void *)apr_redis_info;
+const void *ap_hack_apr_redis_incr = (const void *)apr_redis_incr;
+const void *ap_hack_apr_redis_decr = (const void *)apr_redis_decr;
+const void *ap_hack_apr_redis_ping = (const void *)apr_redis_ping;
+const void *ap_hack_apr_redis_multgetp = (const void *)apr_redis_multgetp;
+const void *ap_hack_apr_redis_stats = (const void *)apr_redis_stats;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_reslist.h
+ */
+const void *ap_hack_apr_reslist_create = (const void *)apr_reslist_create;
+const void *ap_hack_apr_reslist_destroy = (const void *)apr_reslist_destroy;
+const void *ap_hack_apr_reslist_acquire_ex = (const void *)apr_reslist_acquire_ex;
+const void *ap_hack_apr_reslist_acquire = (const void *)apr_reslist_acquire;
+const void *ap_hack_apr_reslist_release = (const void *)apr_reslist_release;
+const void *ap_hack_apr_reslist_timeout_set = (const void *)apr_reslist_timeout_set;
+const void *ap_hack_apr_reslist_acquired_count = (const void *)apr_reslist_acquired_count;
+const void *ap_hack_apr_reslist_invalidate = (const void *)apr_reslist_invalidate;
+const void *ap_hack_apr_reslist_maintain = (const void *)apr_reslist_maintain;
+const void *ap_hack_apr_reslist_cleanup_order_set = (const void *)apr_reslist_cleanup_order_set;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_rmm.h
+ */
+const void *ap_hack_apr_rmm_init = (const void *)apr_rmm_init;
+const void *ap_hack_apr_rmm_destroy = (const void *)apr_rmm_destroy;
+const void *ap_hack_apr_rmm_attach = (const void *)apr_rmm_attach;
+const void *ap_hack_apr_rmm_detach = (const void *)apr_rmm_detach;
+const void *ap_hack_apr_rmm_malloc = (const void *)apr_rmm_malloc;
+const void *ap_hack_apr_rmm_realloc = (const void *)apr_rmm_realloc;
+const void *ap_hack_apr_rmm_calloc = (const void *)apr_rmm_calloc;
+const void *ap_hack_apr_rmm_free = (const void *)apr_rmm_free;
+const void *ap_hack_apr_rmm_addr_get = (const void *)apr_rmm_addr_get;
+const void *ap_hack_apr_rmm_offset_get = (const void *)apr_rmm_offset_get;
+const void *ap_hack_apr_rmm_overhead_get = (const void *)apr_rmm_overhead_get;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_sdbm.h
+ */
+const void *ap_hack_apr_sdbm_open = (const void *)apr_sdbm_open;
+const void *ap_hack_apr_sdbm_close = (const void *)apr_sdbm_close;
+const void *ap_hack_apr_sdbm_lock = (const void *)apr_sdbm_lock;
+const void *ap_hack_apr_sdbm_unlock = (const void *)apr_sdbm_unlock;
+const void *ap_hack_apr_sdbm_fetch = (const void *)apr_sdbm_fetch;
+const void *ap_hack_apr_sdbm_store = (const void *)apr_sdbm_store;
+const void *ap_hack_apr_sdbm_delete = (const void *)apr_sdbm_delete;
+const void *ap_hack_apr_sdbm_firstkey = (const void *)apr_sdbm_firstkey;
+const void *ap_hack_apr_sdbm_nextkey = (const void *)apr_sdbm_nextkey;
+const void *ap_hack_apr_sdbm_rdonly = (const void *)apr_sdbm_rdonly;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_sha1.h
+ */
+const void *ap_hack_apr_sha1_base64 = (const void *)apr_sha1_base64;
+const void *ap_hack_apr_sha1_init = (const void *)apr_sha1_init;
+const void *ap_hack_apr_sha1_update = (const void *)apr_sha1_update;
+const void *ap_hack_apr_sha1_update_binary = (const void *)apr_sha1_update_binary;
+const void *ap_hack_apr_sha1_final = (const void *)apr_sha1_final;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_shm.h
+ */
+const void *ap_hack_apr_shm_create = (const void *)apr_shm_create;
+const void *ap_hack_apr_shm_create_ex = (const void *)apr_shm_create_ex;
+const void *ap_hack_apr_shm_remove = (const void *)apr_shm_remove;
+const void *ap_hack_apr_shm_delete = (const void *)apr_shm_delete;
+const void *ap_hack_apr_shm_destroy = (const void *)apr_shm_destroy;
+const void *ap_hack_apr_shm_attach = (const void *)apr_shm_attach;
+const void *ap_hack_apr_shm_attach_ex = (const void *)apr_shm_attach_ex;
+const void *ap_hack_apr_shm_detach = (const void *)apr_shm_detach;
+const void *ap_hack_apr_shm_baseaddr_get = (const void *)apr_shm_baseaddr_get;
+const void *ap_hack_apr_shm_size_get = (const void *)apr_shm_size_get;
+const void *ap_hack_apr_shm_pool_get = (const void *)apr_shm_pool_get;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_signal.h
+ */
+#if APR_HAVE_SIGACTION || defined(DOXYGEN)
+const void *ap_hack_apr_signal = (const void *)apr_signal;
+#else /* !APR_HAVE_SIGACTION */
+#endif
+const void *ap_hack_apr_signal_description_get = (const void *)apr_signal_description_get;
+const void *ap_hack_apr_signal_block = (const void *)apr_signal_block;
+const void *ap_hack_apr_signal_unblock = (const void *)apr_signal_unblock;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_siphash.h
+ */
+const void *ap_hack_apr_siphash = (const void *)apr_siphash;
+const void *ap_hack_apr_siphash_auth = (const void *)apr_siphash_auth;
+const void *ap_hack_apr_siphash24 = (const void *)apr_siphash24;
+const void *ap_hack_apr_siphash24_auth = (const void *)apr_siphash24_auth;
+const void *ap_hack_apr_siphash48 = (const void *)apr_siphash48;
+const void *ap_hack_apr_siphash48_auth = (const void *)apr_siphash48_auth;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_skiplist.h
+ */
+const void *ap_hack_apr_skiplist_alloc = (const void *)apr_skiplist_alloc;
+const void *ap_hack_apr_skiplist_free = (const void *)apr_skiplist_free;
+const void *ap_hack_apr_skiplist_init = (const void *)apr_skiplist_init;
+const void *ap_hack_apr_skiplist_set_compare = (const void *)apr_skiplist_set_compare;
+const void *ap_hack_apr_skiplist_add_index = (const void *)apr_skiplist_add_index;
+const void *ap_hack_apr_skiplist_getlist = (const void *)apr_skiplist_getlist;
+const void *ap_hack_apr_skiplist_find_compare = (const void *)apr_skiplist_find_compare;
+const void *ap_hack_apr_skiplist_find = (const void *)apr_skiplist_find;
+const void *ap_hack_apr_skiplist_last_compare = (const void *)apr_skiplist_last_compare;
+const void *ap_hack_apr_skiplist_last = (const void *)apr_skiplist_last;
+const void *ap_hack_apr_skiplist_next = (const void *)apr_skiplist_next;
+const void *ap_hack_apr_skiplist_previous = (const void *)apr_skiplist_previous;
+const void *ap_hack_apr_skiplist_element = (const void *)apr_skiplist_element;
+const void *ap_hack_apr_skiplist_insert_compare = (const void *)apr_skiplist_insert_compare;
+const void *ap_hack_apr_skiplist_insert = (const void *)apr_skiplist_insert;
+const void *ap_hack_apr_skiplist_add_compare = (const void *)apr_skiplist_add_compare;
+const void *ap_hack_apr_skiplist_add = (const void *)apr_skiplist_add;
+const void *ap_hack_apr_skiplist_replace_compare = (const void *)apr_skiplist_replace_compare;
+const void *ap_hack_apr_skiplist_replace = (const void *)apr_skiplist_replace;
+const void *ap_hack_apr_skiplist_remove_node = (const void *)apr_skiplist_remove_node;
+const void *ap_hack_apr_skiplist_remove_compare = (const void *)apr_skiplist_remove_compare;
+const void *ap_hack_apr_skiplist_remove = (const void *)apr_skiplist_remove;
+const void *ap_hack_apr_skiplist_remove_all = (const void *)apr_skiplist_remove_all;
+const void *ap_hack_apr_skiplist_destroy = (const void *)apr_skiplist_destroy;
+const void *ap_hack_apr_skiplist_pop = (const void *)apr_skiplist_pop;
+const void *ap_hack_apr_skiplist_peek = (const void *)apr_skiplist_peek;
+const void *ap_hack_apr_skiplist_size = (const void *)apr_skiplist_size;
+const void *ap_hack_apr_skiplist_height = (const void *)apr_skiplist_height;
+const void *ap_hack_apr_skiplist_preheight = (const void *)apr_skiplist_preheight;
+const void *ap_hack_apr_skiplist_set_preheight = (const void *)apr_skiplist_set_preheight;
+const void *ap_hack_apr_skiplist_merge = (const void *)apr_skiplist_merge;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_strings.h
+ */
+const void *ap_hack_apr_strnatcmp = (const void *)apr_strnatcmp;
+const void *ap_hack_apr_strnatcasecmp = (const void *)apr_strnatcasecmp;
+const void *ap_hack_apr_pstrdup = (const void *)apr_pstrdup;
+const void *ap_hack_apr_pstrmemdup = (const void *)apr_pstrmemdup;
+const void *ap_hack_apr_pstrndup = (const void *)apr_pstrndup;
+const void *ap_hack_apr_pmemdup = (const void *)apr_pmemdup;
+const void *ap_hack_apr_pstrcat = (const void *)apr_pstrcat;
+const void *ap_hack_apr_pstrcatv = (const void *)apr_pstrcatv;
+const void *ap_hack_apr_pvsprintf = (const void *)apr_pvsprintf;
+const void *ap_hack_apr_psprintf = (const void *)apr_psprintf;
+const void *ap_hack_apr_cpystrn = (const void *)apr_cpystrn;
+const void *ap_hack_apr_collapse_spaces = (const void *)apr_collapse_spaces;
+const void *ap_hack_apr_tokenize_to_argv = (const void *)apr_tokenize_to_argv;
+const void *ap_hack_apr_strtok = (const void *)apr_strtok;
+const void *ap_hack_apr_snprintf = (const void *)apr_snprintf;
+const void *ap_hack_apr_vsnprintf = (const void *)apr_vsnprintf;
+const void *ap_hack_apr_itoa = (const void *)apr_itoa;
+const void *ap_hack_apr_ltoa = (const void *)apr_ltoa;
+const void *ap_hack_apr_off_t_toa = (const void *)apr_off_t_toa;
+const void *ap_hack_apr_strtoff = (const void *)apr_strtoff;
+const void *ap_hack_apr_strtoi64 = (const void *)apr_strtoi64;
+const void *ap_hack_apr_atoi64 = (const void *)apr_atoi64;
+const void *ap_hack_apr_strfsize = (const void *)apr_strfsize;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_strmatch.h
+ */
+#if defined(DOXYGEN)
+const void *ap_hack_apr_strmatch = (const void *)apr_strmatch;
+#else
+#endif
+const void *ap_hack_apr_strmatch_precompile = (const void *)apr_strmatch_precompile;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_tables.h
+ */
+const void *ap_hack_apr_table_elts = (const void *)apr_table_elts;
+const void *ap_hack_apr_is_empty_table = (const void *)apr_is_empty_table;
+const void *ap_hack_apr_is_empty_array = (const void *)apr_is_empty_array;
+const void *ap_hack_apr_array_make = (const void *)apr_array_make;
+const void *ap_hack_apr_array_push = (const void *)apr_array_push;
+const void *ap_hack_apr_array_pop = (const void *)apr_array_pop;
+const void *ap_hack_apr_array_clear = (const void *)apr_array_clear;
+const void *ap_hack_apr_array_cat = (const void *)apr_array_cat;
+const void *ap_hack_apr_array_copy = (const void *)apr_array_copy;
+const void *ap_hack_apr_array_copy_hdr = (const void *)apr_array_copy_hdr;
+const void *ap_hack_apr_array_append = (const void *)apr_array_append;
+const void *ap_hack_apr_array_pstrcat = (const void *)apr_array_pstrcat;
+const void *ap_hack_apr_table_make = (const void *)apr_table_make;
+const void *ap_hack_apr_table_copy = (const void *)apr_table_copy;
+const void *ap_hack_apr_table_clone = (const void *)apr_table_clone;
+const void *ap_hack_apr_table_clear = (const void *)apr_table_clear;
+const void *ap_hack_apr_table_get = (const void *)apr_table_get;
+const void *ap_hack_apr_table_getm = (const void *)apr_table_getm;
+const void *ap_hack_apr_table_set = (const void *)apr_table_set;
+const void *ap_hack_apr_table_setn = (const void *)apr_table_setn;
+const void *ap_hack_apr_table_unset = (const void *)apr_table_unset;
+const void *ap_hack_apr_table_merge = (const void *)apr_table_merge;
+const void *ap_hack_apr_table_mergen = (const void *)apr_table_mergen;
+const void *ap_hack_apr_table_add = (const void *)apr_table_add;
+const void *ap_hack_apr_table_addn = (const void *)apr_table_addn;
+const void *ap_hack_apr_table_overlay = (const void *)apr_table_overlay;
+const void *ap_hack_apr_table_do = (const void *)apr_table_do;
+const void *ap_hack_apr_table_vdo = (const void *)apr_table_vdo;
+const void *ap_hack_apr_table_overlap = (const void *)apr_table_overlap;
+const void *ap_hack_apr_table_compress = (const void *)apr_table_compress;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_thread_cond.h
+ */
+#if APR_HAS_THREADS || defined(DOXYGEN)
+const void *ap_hack_apr_thread_cond_create = (const void *)apr_thread_cond_create;
+const void *ap_hack_apr_thread_cond_wait = (const void *)apr_thread_cond_wait;
+const void *ap_hack_apr_thread_cond_timedwait = (const void *)apr_thread_cond_timedwait;
+const void *ap_hack_apr_thread_cond_signal = (const void *)apr_thread_cond_signal;
+const void *ap_hack_apr_thread_cond_broadcast = (const void *)apr_thread_cond_broadcast;
+const void *ap_hack_apr_thread_cond_destroy = (const void *)apr_thread_cond_destroy;
+const void *ap_hack_apr_thread_cond_pool_get = (const void *)apr_thread_cond_pool_get;
+#endif /* APR_HAS_THREADS */
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_thread_mutex.h
+ */
+#if APR_HAS_THREADS || defined(DOXYGEN)
+const void *ap_hack_apr_thread_mutex_create = (const void *)apr_thread_mutex_create;
+const void *ap_hack_apr_thread_mutex_lock = (const void *)apr_thread_mutex_lock;
+const void *ap_hack_apr_thread_mutex_trylock = (const void *)apr_thread_mutex_trylock;
+const void *ap_hack_apr_thread_mutex_timedlock = (const void *)apr_thread_mutex_timedlock;
+const void *ap_hack_apr_thread_mutex_unlock = (const void *)apr_thread_mutex_unlock;
+const void *ap_hack_apr_thread_mutex_destroy = (const void *)apr_thread_mutex_destroy;
+const void *ap_hack_apr_thread_mutex_pool_get = (const void *)apr_thread_mutex_pool_get;
+#endif /* APR_HAS_THREADS */
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_thread_pool.h
+ */
+#if APR_HAS_THREADS
+const void *ap_hack_apr_thread_pool_create = (const void *)apr_thread_pool_create;
+const void *ap_hack_apr_thread_pool_destroy = (const void *)apr_thread_pool_destroy;
+const void *ap_hack_apr_thread_pool_push = (const void *)apr_thread_pool_push;
+const void *ap_hack_apr_thread_pool_schedule = (const void *)apr_thread_pool_schedule;
+const void *ap_hack_apr_thread_pool_top = (const void *)apr_thread_pool_top;
+const void *ap_hack_apr_thread_pool_tasks_cancel = (const void *)apr_thread_pool_tasks_cancel;
+const void *ap_hack_apr_thread_pool_tasks_count = (const void *)apr_thread_pool_tasks_count;
+const void *ap_hack_apr_thread_pool_scheduled_tasks_count = (const void *)apr_thread_pool_scheduled_tasks_count;
+const void *ap_hack_apr_thread_pool_threads_count = (const void *)apr_thread_pool_threads_count;
+const void *ap_hack_apr_thread_pool_busy_count = (const void *)apr_thread_pool_busy_count;
+const void *ap_hack_apr_thread_pool_idle_count = (const void *)apr_thread_pool_idle_count;
+const void *ap_hack_apr_thread_pool_idle_max_set = (const void *)apr_thread_pool_idle_max_set;
+const void *ap_hack_apr_thread_pool_idle_max_get = (const void *)apr_thread_pool_idle_max_get;
+const void *ap_hack_apr_thread_pool_thread_max_set = (const void *)apr_thread_pool_thread_max_set;
+const void *ap_hack_apr_thread_pool_thread_max_get = (const void *)apr_thread_pool_thread_max_get;
+const void *ap_hack_apr_thread_pool_threshold_set = (const void *)apr_thread_pool_threshold_set;
+const void *ap_hack_apr_thread_pool_threshold_get = (const void *)apr_thread_pool_threshold_get;
+const void *ap_hack_apr_thread_pool_task_owner_get = (const void *)apr_thread_pool_task_owner_get;
+#endif /* APR_HAS_THREADS */
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_thread_proc.h
+ */
+#if APR_HAS_THREADS
+const void *ap_hack_apr_threadattr_create = (const void *)apr_threadattr_create;
+const void *ap_hack_apr_threadattr_detach_set = (const void *)apr_threadattr_detach_set;
+const void *ap_hack_apr_threadattr_detach_get = (const void *)apr_threadattr_detach_get;
+const void *ap_hack_apr_threadattr_stacksize_set = (const void *)apr_threadattr_stacksize_set;
+const void *ap_hack_apr_threadattr_guardsize_set = (const void *)apr_threadattr_guardsize_set;
+const void *ap_hack_apr_thread_create = (const void *)apr_thread_create;
+const void *ap_hack_apr_thread_exit = (const void *)apr_thread_exit;
+const void *ap_hack_apr_thread_join = (const void *)apr_thread_join;
+const void *ap_hack_apr_thread_yield = (const void *)apr_thread_yield;
+const void *ap_hack_apr_thread_once_init = (const void *)apr_thread_once_init;
+const void *ap_hack_apr_thread_once = (const void *)apr_thread_once;
+const void *ap_hack_apr_thread_detach = (const void *)apr_thread_detach;
+const void *ap_hack_apr_thread_data_get = (const void *)apr_thread_data_get;
+const void *ap_hack_apr_thread_data_set = (const void *)apr_thread_data_set;
+const void *ap_hack_apr_threadkey_private_create = (const void *)apr_threadkey_private_create;
+const void *ap_hack_apr_threadkey_private_get = (const void *)apr_threadkey_private_get;
+const void *ap_hack_apr_threadkey_private_set = (const void *)apr_threadkey_private_set;
+const void *ap_hack_apr_threadkey_private_delete = (const void *)apr_threadkey_private_delete;
+const void *ap_hack_apr_threadkey_data_get = (const void *)apr_threadkey_data_get;
+const void *ap_hack_apr_threadkey_data_set = (const void *)apr_threadkey_data_set;
+#endif
+const void *ap_hack_apr_procattr_create = (const void *)apr_procattr_create;
+const void *ap_hack_apr_procattr_io_set = (const void *)apr_procattr_io_set;
+const void *ap_hack_apr_procattr_child_in_set = (const void *)apr_procattr_child_in_set;
+const void *ap_hack_apr_procattr_child_out_set = (const void *)apr_procattr_child_out_set;
+const void *ap_hack_apr_procattr_child_err_set = (const void *)apr_procattr_child_err_set;
+const void *ap_hack_apr_procattr_dir_set = (const void *)apr_procattr_dir_set;
+const void *ap_hack_apr_procattr_cmdtype_set = (const void *)apr_procattr_cmdtype_set;
+const void *ap_hack_apr_procattr_detach_set = (const void *)apr_procattr_detach_set;
+#if APR_HAVE_STRUCT_RLIMIT
+const void *ap_hack_apr_procattr_limit_set = (const void *)apr_procattr_limit_set;
+#endif
+const void *ap_hack_apr_procattr_child_errfn_set = (const void *)apr_procattr_child_errfn_set;
+const void *ap_hack_apr_procattr_error_check_set = (const void *)apr_procattr_error_check_set;
+const void *ap_hack_apr_procattr_addrspace_set = (const void *)apr_procattr_addrspace_set;
+const void *ap_hack_apr_procattr_user_set = (const void *)apr_procattr_user_set;
+const void *ap_hack_apr_procattr_group_set = (const void *)apr_procattr_group_set;
+const void *ap_hack_apr_procattr_perms_set_register = (const void *)apr_procattr_perms_set_register;
+#if APR_HAS_FORK
+const void *ap_hack_apr_proc_fork = (const void *)apr_proc_fork;
+#endif
+const void *ap_hack_apr_proc_create = (const void *)apr_proc_create;
+const void *ap_hack_apr_proc_wait = (const void *)apr_proc_wait;
+const void *ap_hack_apr_proc_wait_all_procs = (const void *)apr_proc_wait_all_procs;
+const void *ap_hack_apr_proc_detach = (const void *)apr_proc_detach;
+const void *ap_hack_apr_proc_other_child_register = (const void *)apr_proc_other_child_register;
+const void *ap_hack_apr_proc_other_child_unregister = (const void *)apr_proc_other_child_unregister;
+const void *ap_hack_apr_proc_other_child_alert = (const void *)apr_proc_other_child_alert;
+const void *ap_hack_apr_proc_other_child_refresh = (const void *)apr_proc_other_child_refresh;
+const void *ap_hack_apr_proc_other_child_refresh_all = (const void *)apr_proc_other_child_refresh_all;
+const void *ap_hack_apr_proc_kill = (const void *)apr_proc_kill;
+const void *ap_hack_apr_pool_note_subprocess = (const void *)apr_pool_note_subprocess;
+#if APR_HAS_THREADS 
+#if (APR_HAVE_SIGWAIT || APR_HAVE_SIGSUSPEND) && !defined(OS2)
+const void *ap_hack_apr_setup_signal_thread = (const void *)apr_setup_signal_thread;
+const void *ap_hack_apr_signal_thread = (const void *)apr_signal_thread;
+#endif /* (APR_HAVE_SIGWAIT || APR_HAVE_SIGSUSPEND) && !defined(OS2) */
+const void *ap_hack_apr_thread_pool_get = (const void *)apr_thread_pool_get;
+#endif /* APR_HAS_THREADS */
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_thread_rwlock.h
+ */
+#if APR_HAS_THREADS
+const void *ap_hack_apr_thread_rwlock_create = (const void *)apr_thread_rwlock_create;
+const void *ap_hack_apr_thread_rwlock_rdlock = (const void *)apr_thread_rwlock_rdlock;
+const void *ap_hack_apr_thread_rwlock_tryrdlock = (const void *)apr_thread_rwlock_tryrdlock;
+const void *ap_hack_apr_thread_rwlock_wrlock = (const void *)apr_thread_rwlock_wrlock;
+const void *ap_hack_apr_thread_rwlock_trywrlock = (const void *)apr_thread_rwlock_trywrlock;
+const void *ap_hack_apr_thread_rwlock_unlock = (const void *)apr_thread_rwlock_unlock;
+const void *ap_hack_apr_thread_rwlock_destroy = (const void *)apr_thread_rwlock_destroy;
+const void *ap_hack_apr_thread_rwlock_pool_get = (const void *)apr_thread_rwlock_pool_get;
+#endif  /* APR_HAS_THREADS */
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_time.h
+ */
+const void *ap_hack_apr_time_now = (const void *)apr_time_now;
+const void *ap_hack_apr_time_ansi_put = (const void *)apr_time_ansi_put;
+const void *ap_hack_apr_time_exp_tz = (const void *)apr_time_exp_tz;
+const void *ap_hack_apr_time_exp_gmt = (const void *)apr_time_exp_gmt;
+const void *ap_hack_apr_time_exp_lt = (const void *)apr_time_exp_lt;
+const void *ap_hack_apr_time_exp_get = (const void *)apr_time_exp_get;
+const void *ap_hack_apr_time_exp_gmt_get = (const void *)apr_time_exp_gmt_get;
+const void *ap_hack_apr_sleep = (const void *)apr_sleep;
+const void *ap_hack_apr_rfc822_date = (const void *)apr_rfc822_date;
+const void *ap_hack_apr_ctime = (const void *)apr_ctime;
+const void *ap_hack_apr_strftime = (const void *)apr_strftime;
+const void *ap_hack_apr_time_clock_hires = (const void *)apr_time_clock_hires;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_uri.h
+ */
+const void *ap_hack_apr_uri_port_of_scheme = (const void *)apr_uri_port_of_scheme;
+const void *ap_hack_apr_uri_unparse = (const void *)apr_uri_unparse;
+const void *ap_hack_apr_uri_parse = (const void *)apr_uri_parse;
+const void *ap_hack_apr_uri_parse_hostinfo = (const void *)apr_uri_parse_hostinfo;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_user.h
+ */
+#if APR_HAS_USER 
+const void *ap_hack_apr_uid_current = (const void *)apr_uid_current;
+const void *ap_hack_apr_uid_name_get = (const void *)apr_uid_name_get;
+const void *ap_hack_apr_uid_get = (const void *)apr_uid_get;
+const void *ap_hack_apr_uid_homepath_get = (const void *)apr_uid_homepath_get;
+#if defined(WIN32)
+const void *ap_hack_apr_uid_compare = (const void *)apr_uid_compare;
+#else
+#endif
+const void *ap_hack_apr_gid_name_get = (const void *)apr_gid_name_get;
+const void *ap_hack_apr_gid_get = (const void *)apr_gid_get;
+#if defined(WIN32)
+const void *ap_hack_apr_gid_compare = (const void *)apr_gid_compare;
+#else
+#endif
+#endif  /* ! APR_HAS_USER */
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_uuid.h
+ */
+const void *ap_hack_apr_uuid_get = (const void *)apr_uuid_get;
+const void *ap_hack_apr_uuid_format = (const void *)apr_uuid_format;
+const void *ap_hack_apr_uuid_parse = (const void *)apr_uuid_parse;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_version.h
+ */
+#ifndef APR_VERSION_ONLY
+const void *ap_hack_apr_version = (const void *)apr_version;
+const void *ap_hack_apr_version_string = (const void *)apr_version_string;
+#endif /* ndef APR_VERSION_ONLY */
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_xlate.h
+ */
+const void *ap_hack_apr_xlate_open = (const void *)apr_xlate_open;
+const void *ap_hack_apr_xlate_sb_get = (const void *)apr_xlate_sb_get;
+const void *ap_hack_apr_xlate_conv_buffer = (const void *)apr_xlate_conv_buffer;
+#ifdef APR_NOT_DONE_YET
+const void *ap_hack_apr_xlate_conv_char = (const void *)apr_xlate_conv_char;
+#endif
+const void *ap_hack_apr_xlate_conv_byte = (const void *)apr_xlate_conv_byte;
+const void *ap_hack_apr_xlate_close = (const void *)apr_xlate_close;
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apr_xml.h
+ */
+const void *ap_hack_apr_text_append = (const void *)apr_text_append;
+const void *ap_hack_apr_xml_parser_create = (const void *)apr_xml_parser_create;
+const void *ap_hack_apr_xml_parse_file = (const void *)apr_xml_parse_file;
+const void *ap_hack_apr_xml_parser_feed = (const void *)apr_xml_parser_feed;
+const void *ap_hack_apr_xml_parser_done = (const void *)apr_xml_parser_done;
+const void *ap_hack_apr_xml_parser_geterror = (const void *)apr_xml_parser_geterror;
+const void *ap_hack_apr_xml_to_text = (const void *)apr_xml_to_text;
+const void *ap_hack_apr_xml_empty_elem = (const void *)apr_xml_empty_elem;
+const void *ap_hack_apr_xml_quote_string = (const void *)apr_xml_quote_string;
+const void *ap_hack_apr_xml_quote_elem = (const void *)apr_xml_quote_elem;
+const void *ap_hack_apr_xml_insert_uri = (const void *)apr_xml_insert_uri;
+#if APR_CHARSET_EBCDIC
+const void *ap_hack_apr_xml_parser_convert_doc = (const void *)apr_xml_parser_convert_doc;
+#endif
+
+/*
+ * /home/antonio/Downloads/httpd-trunk/srclib/apr/include/apu_errno.h
+ */
+const void *ap_hack_apr_errprintf = (const void *)apr_errprintf;
+
diff --git a/server/fuzzing_aux.c b/server/fuzzing_aux.c
new file mode 100644
index 0000000000..cbed004e20
--- /dev/null
+++ b/server/fuzzing_aux.c
@@ -0,0 +1,245 @@
+
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <netinet/in.h>
+#include <unistd.h>
+#include <arpa/inet.h>
+#include <netdb.h>
+#include <unistd.h>
+#include <signal.h>
+#include <stdio.h>
+#include <string.h>
+#include <fcntl.h>
+#include <sys/time.h>
+#include <stdlib.h>
+#include <memory.h>
+#include <ifaddrs.h>
+#include <net/if.h>
+#include <stdarg.h>
+#include <math.h>
+#include <sys/termios.h>
+#include <ev.h>
+#include <sys/types.h>
+
+#include <errno.h>
+#include <unistd.h>
+#include <math.h>
+
+#include <dirent.h>
+
+#include <execinfo.h>
+
+#include "fuzzing_aux.h"
+
+
+
+int clean_directory(const char *path) {
+   DIR *d = opendir(path);
+   size_t path_len = strlen(path);
+   int r = -1;
+
+   if (d) {
+      struct dirent *p;
+
+      r = 0;
+      while (!r && (p=readdir(d))) {
+          int r2 = -1;
+          char *buf;
+          size_t len;
+
+          /* Skip the names "." and ".." as we don't want to recurse on them. */
+          if (!strcmp(p->d_name, ".") || !strcmp(p->d_name, ".."))
+             continue;
+
+          len = path_len + strlen(p->d_name) + 2;
+          buf = malloc(len);
+
+          if (buf) {
+             struct stat statbuf;
+
+             snprintf(buf, len, "%s/%s", path, p->d_name);
+             if (!stat(buf, &statbuf)) {
+                if (S_ISDIR(statbuf.st_mode))
+                   r2 = clean_directory(buf);
+                else
+                   r2 = unlink(buf);
+             }
+             free(buf);
+          }
+          r = r2;
+      }
+      closedir(d);
+   }
+
+   return r;
+}
+
+int selfconnect(char* address, int port, char mpm){
+
+
+	int tmp;
+	int sock = 0, valread;
+	struct sockaddr_in serv_addr;
+
+	void *ContentLengthStr;
+	uint ContentLengthSize;
+	uint numCharacters;
+	void *delimiter;
+	void *eoreq;
+	void *eol;
+	void *start_ptr;
+	unsigned char filetmp[MAX_INPUT_SIZE];
+
+    char errmsg[1024];
+	struct timeval tv;
+
+    uint8_t buf[65536];
+    ssize_t length = 0;
+
+	clean_directory("/home/antonio/Downloads/httpd-trunk/install/logs/cache");
+
+
+	if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0){
+		printf("\nSocket creation failed \n");
+		return -1;
+	}
+
+	fuzzingFD = sock;
+
+	if(access(inputFile, F_OK) == -1){
+		printf("error accessing input file: %s\n", inputFile);
+        perror("Error: ");
+		return -1;
+	}
+
+	fd_inputFile = open(inputFile , O_RDONLY );
+
+	filesize = lseek(fd_inputFile, 0L, SEEK_END);
+	lseek(fd_inputFile, 0L, SEEK_SET);
+
+	if(filesize > MAX_INPUT_SIZE)
+		return -1;
+
+	read(fd_inputFile, filedata, filesize);
+
+	//Recalculate Content-Length
+	start_ptr = filedata;
+	ContentLengthStr = memmem(start_ptr, filesize, "Content-Length:", 15);
+	while(ContentLengthStr){
+
+		delimiter = memmem(ContentLengthStr, filesize-(ContentLengthStr-(void*)filedata), "\r\n\r\n", 4);
+		if(delimiter){
+
+			eoreq = memmem(delimiter+4, filesize-(delimiter+4-(void*)start_ptr), "\r\n\r\n", 4);
+
+			if(eoreq)
+				ContentLengthSize = eoreq-delimiter-4;
+			else
+				ContentLengthSize = filesize - (delimiter-(void*)start_ptr+4);
+
+			eol = memmem(ContentLengthStr, filesize-(ContentLengthStr-(void*)start_ptr), "\r\n", 2);
+			if(eol){
+				memcpy(filetmp, eol, filesize-(eol-(void*)start_ptr));
+
+				memcpy(ContentLengthStr, "Content-Length: ", 16);
+				sprintf(ContentLengthStr+16, "%d", ContentLengthSize);
+				if(ContentLengthSize != 0)
+					numCharacters = (int)((ceil(log10(ContentLengthSize))+1)*sizeof(char))-1;
+
+				memcpy(ContentLengthStr+16+numCharacters, filetmp, filesize-(eol-(void*)start_ptr));
+				filesize = ContentLengthStr-(void*)filedata + 16 + numCharacters + filesize-(eol-(void*)filedata);
+			}
+		}
+
+		start_ptr = ContentLengthStr+16;
+		ContentLengthStr = memmem(start_ptr, filesize-(ContentLengthStr-(void*)filedata), "Content-Length:", 15);
+	}
+
+	serv_addr.sin_family = AF_INET;
+	serv_addr.sin_port = htons(port);
+
+	// Convert IPv4 and IPv6 addresses from text to binary form
+	if(inet_pton(AF_INET, address, &serv_addr.sin_addr)<=0){
+		printf("\nInvalid address/ Address not supported \n");
+		return -1;
+	}
+
+	//tmp = fcntl(sock, F_SETFL, fcntl(sock, F_GETFL) | O_NONBLOCK);
+
+	tv.tv_sec = 0;
+	tv.tv_usec = 10000;
+	setsockopt(sock, SOL_SOCKET, SO_RCVTIMEO, (const char*)&tv, sizeof tv);
+
+	tmp = connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr));
+	if (tmp < 0){
+		printf("\nConnection Failed \n");
+        perror("Error: ");
+		return -1;
+	}
+
+	if(send(sock, filedata, filesize, 0) < 0){
+		printf("\nSend Failed \n");
+        perror("Error: ");
+		return -1;
+	}
+
+	if(shutdown(sock, SHUT_WR) < 0){
+		printf("\nSend Failed \n");
+        perror("Error: ");
+		return -1;
+	}
+
+	//mpm event
+	if(mpm == 'e'){
+		//while( (length = recv(sock, buf, 65536, MSG_DONTWAIT )) > 0 ){
+		while( (length = recv(sock, buf, 65536, 0 )) > 0 ){
+			write(STDOUT_FILENO, buf, length);
+		}
+
+		close(sock);
+	}
+
+
+
+    //fprintf(stderr, "Step_3\n");
+
+	return 0;
+}
+
+
+void Write_and_close(){
+
+    uint8_t buf[65536];
+	ssize_t length = 0;
+
+	while( (length = recv(fuzzingFD, buf, 65536, 0 )) > 0 ){
+		write(STDOUT_FILENO, buf, length);
+	}
+
+	close(fuzzingFD);
+}
+
+
+print_trace(void){
+
+  void *array[10];
+  char **strings;
+  int size, i;
+
+  size = backtrace (array, 10);
+  strings = backtrace_symbols (array, size);
+  if (strings != NULL)
+  {
+
+    printf ("Obtained %d stack frames.\n", size);
+    for (i = 0; i < size; i++)
+      printf ("%s\n", strings[i]);
+  }
+
+  free (strings);
+
+  getchar();
+}
+
+
+
diff --git a/server/listen.c b/server/listen.c
index 445d1202c9..498fd39775 100644
--- a/server/listen.c
+++ b/server/listen.c
@@ -39,6 +39,9 @@
 #include <systemd/sd-daemon.h>
 #endif
 
+#include "fuzzing_aux.h"
+#include "arch/unix/apr_arch_networkio.h"
+
 /* we know core's module_index is 0 */
 #undef APLOG_MODULE_INDEX
 #define APLOG_MODULE_INDEX AP_CORE_MODULE_INDEX
@@ -74,6 +77,13 @@ static int use_systemd = -1;
 /* TODO: make_sock is just begging and screaming for APR abstraction */
 static apr_status_t make_sock(apr_pool_t *p, ap_listen_rec *server, int do_bind_listen)
 {
+
+	//MYCHANGE
+	struct sockaddr_in my_addr;
+	struct sockaddr_in * tmp;
+	int len;
+	//----------------------
+
     apr_socket_t *s = server->sd;
     int one = 1;
 #if APR_HAVE_IPV6
@@ -197,6 +207,11 @@ static apr_status_t make_sock(apr_pool_t *p, ap_listen_rec *server, int do_bind_
         }
 #endif
 
+        //MYCHANGE
+        tmp = (struct sockaddr *)&server->bind_addr->sa;
+        tmp->sin_port = 0;
+        //-----------------
+
         if ((stat = apr_socket_bind(s, server->bind_addr)) != APR_SUCCESS) {
             ap_log_perror(APLOG_MARK, APLOG_STARTUP|APLOG_CRIT, stat, p, APLOGNO(00072)
                           "make_sock: could not bind to address %pI",
@@ -205,6 +220,12 @@ static apr_status_t make_sock(apr_pool_t *p, ap_listen_rec *server, int do_bind_
             return stat;
         }
 
+        //MYCHANGE
+        len = sizeof(my_addr);
+        getsockname(s->socketdes, (struct sockaddr *) &my_addr, &len);
+        currentPort = ntohs(my_addr.sin_port);
+        //---------------------
+
         if ((stat = apr_socket_listen(s, ap_listenbacklog)) != APR_SUCCESS) {
             ap_log_perror(APLOG_MARK, APLOG_STARTUP|APLOG_ERR, stat, p, APLOGNO(00073)
                           "make_sock: unable to listen for connections "
diff --git a/server/log.c b/server/log.c
index 1a32ebb2d9..f6626db95a 100644
--- a/server/log.c
+++ b/server/log.c
@@ -528,7 +528,10 @@ static int log_local_address(const ap_errorlog_info *info, const char *arg,
 static int log_pid(const ap_errorlog_info *info, const char *arg,
                    char *buf, int buflen)
 {
-    pid_t pid = getpid();
+	//MYCHANGE
+    //pid_t pid = getpid();
+    pid_t pid = 106820;
+    //--------------------------
     return apr_snprintf(buf, buflen, "%" APR_PID_T_FMT, pid);
 }
 
@@ -777,7 +780,10 @@ static int core_generate_log_id(const conn_rec *c, const request_rec *r,
         id = (apr_uint64_t)apr_time_now();
     }
 
-    pid = getpid();
+    //MYCHANGE
+    //pid = getpid();
+    pid = 106820;
+    //---------------------------
     if (sizeof(pid_t) > 2) {
         tmp = pid;
         tmp = tmp << 40;
diff --git a/server/main.c b/server/main.c
index a126ce1883..b73ea8a956 100644
--- a/server/main.c
+++ b/server/main.c
@@ -41,6 +41,11 @@
 #include "util_ebcdic.h"
 #include "ap_mpm.h"
 
+#include "fuzzing_aux.h"
+#ifndef MAIN_C
+#define MAIN_C
+#endif
+
 #if APR_HAVE_UNISTD_H
 #include <unistd.h>
 #else
@@ -333,6 +338,7 @@ static process_rec *init_process(int *argc, const char * const * *argv)
         stat = apr_pool_create(&cntx, NULL);
     }
 
+
     if (stat != APR_SUCCESS) {
         /* For all intents and purposes, this is impossibly unlikely,
          * but APR doesn't exist yet, we can't use it for reporting
@@ -356,6 +362,7 @@ static process_rec *init_process(int *argc, const char * const * *argv)
     apr_pool_tag(cntx, "process");
     ap_open_stderr_log(cntx);
 
+
     /* Now we have initialized apr and our logger, no more
      * exceptional error reporting required for the lifetime
      * of this server process.
@@ -367,9 +374,12 @@ static process_rec *init_process(int *argc, const char * const * *argv)
     process->pconf = NULL;
     reset_process_pconf(process);
 
+
     process->argc = *argc;
     process->argv = *argv;
     process->short_name = apr_filepath_name_get((*argv)[0]);
+
+
     return process;
 }
 
@@ -485,33 +495,83 @@ static void usage(process_rec *process)
     destroy_and_exit_process(process, 1);
 }
 
+char *inputFile;
+int fd_inputFile;
+unsigned char filedata[MAX_INPUT_SIZE];
+unsigned int filesize;
+int currentPort;
+int ready_to_fuzz;
+int fuzzingFD;
+
 #ifdef HFND_FUZZING_ENTRY_FUNCTION
  HFND_FUZZING_ENTRY_FUNCTION(int argc, const char *const *argv)
 #else
  int main(int argc, const char *const *argv)
 #endif
 {
-    char c;
-    int showcompile = 0, showdirectives = 0;
-    const char *confname = SERVER_CONFIG_FILE;
-    const char *def_server_root = HTTPD_ROOT;
-    const char *temp_error_log = NULL;
-    const char *error;
-    process_rec *process;
-    apr_pool_t *pconf;
-    apr_pool_t *plog; /* Pool of log streams, reset _after_ each read of conf */
-    apr_pool_t *ptemp; /* Pool for temporary config stuff, reset often */
-    apr_pool_t *pcommands; /* Pool for -D, -C and -c switches */
-    apr_getopt_t *opt;
-    apr_status_t rv;
-    module **mod;
-    const char *opt_arg;
-    APR_OPTIONAL_FN_TYPE(ap_signal_server) *signal_server;
-    int rc = OK;
+
+	    int showcompile = 0, showdirectives = 0;
+	    const char *confname = SERVER_CONFIG_FILE;
+	    const char *def_server_root = HTTPD_ROOT;
+	    const char *temp_error_log = NULL;
+	    const char *error;
+	    process_rec *process;
+	    apr_pool_t *pconf;
+	    apr_pool_t *plog; /* Pool of log streams, reset _after_ each read of conf */
+	    apr_pool_t *ptemp; /* Pool for temporary config stuff, reset often */
+	    apr_pool_t *pcommands; /* Pool for -D, -C and -c switches */
+	    apr_getopt_t *opt;
+	    apr_status_t rv;
+	    module **mod;
+	    const char *opt_arg;
+	    APR_OPTIONAL_FN_TYPE(ap_signal_server) *signal_server;
+	    char c;
+	    int rc = OK;
+
+
+	 //MYCHANGE
+		 char tmpStr[6];
+		 void *tmpptr;
+		 /*
+		  struct rlimit limit;
+
+		  getrlimit (RLIMIT_STACK, &limit);
+		  printf ("\nStack Limit = %ld and %ld max\n", limit.rlim_cur, limit.rlim_max);
+
+		  limit.rlim_cur *= 4;
+
+		  if(setrlimit(RLIMIT_STACK, &limit) != 0)
+			  printf("Error setting new stack limit");
+
+		  getrlimit (RLIMIT_STACK, &limit);
+		  printf ("\nStack Limit = %ld and %ld max\n", limit.rlim_cur, limit.rlim_max);
+*/
+		 ready_to_fuzz = 0;
+
+		//Extract last argv argument
+		inputFile = strdup(argv[argc-1]);
+		argc--;
+		//argv[argc] = 0;
+
+		sprintf( tmpStr, "%d", fd_inputFile );
+		if(setenv("fd_inputFile", tmpStr, 1) < 0){
+			fprintf(stderr, "error setting fd_inputFile envvar: %s\n", tmpStr);
+			exit(-1);
+		}
+
+		if(setenv("str_inputFile", inputFile, 1) < 0){
+			fprintf(stderr, "error setting str_inputFile envvar: %s\n", inputFile);
+			exit(-1);
+		}
+
+
+
+
 
     AP_MONCONTROL(0); /* turn off profiling of startup */
 
     process = init_process(&argc, &argv);
+
     ap_pglobal = process->pool;
     pconf = process->pconf;
     ap_server_argv0 = process->short_name;
@@ -544,6 +604,8 @@ static void usage(process_rec *process)
 
     ap_run_rewrite_args(process);
 
+
+
     /* Maintain AP_SERVER_BASEARGS list in http_main.h to allow the MPM
      * to safely pass on our args from its rewrite_args() handler.
      */
@@ -681,16 +743,18 @@ static void usage(process_rec *process)
     if (temp_error_log) {
         ap_replace_stderr_log(process->pool, temp_error_log);
     }
+
     ap_server_conf = ap_read_config(process, ptemp, confname, &ap_conftree);
     if (!ap_server_conf) {
         if (showcompile) {
-            /* Well, we tried. Show as much as we can, but exit nonzero to
-             * indicate that something's not right. The cause should have
-             * already been logged. */
+            // Well, we tried. Show as much as we can, but exit nonzero to
+             // indicate that something's not right. The cause should have
+             // already been logged.
             show_compile_settings();
         }
         destroy_and_exit_process(process, 1);
     }
+
     apr_pool_cleanup_register(pconf, &ap_server_conf, ap_pool_cleanup_set_null,
                               apr_pool_cleanup_null);
 
@@ -702,6 +766,7 @@ static void usage(process_rec *process)
     /* sort hooks here to make sure pre_config hooks are sorted properly */
     apr_hook_sort_all();
 
+
     if (ap_run_pre_config(pconf, plog, ptemp) != OK) {
         ap_log_error(APLOG_MARK, APLOG_STARTUP |APLOG_ERR, 0,
                      NULL, APLOGNO(00013) "Pre-configuration failed");
@@ -710,6 +775,7 @@ static void usage(process_rec *process)
 
     rv = ap_process_config_tree(ap_server_conf, ap_conftree,
                                 process->pconf, ptemp);
+
     if (rv == OK) {
         ap_fixup_virtual_hosts(pconf, ap_server_conf);
         ap_fini_vhost_config(pconf, ap_server_conf);
diff --git a/server/mpm_unix.c b/server/mpm_unix.c
index 8c4d233792..83fff6e119 100644
--- a/server/mpm_unix.c
+++ b/server/mpm_unix.c
@@ -786,6 +786,8 @@ int ap_signal_server(int *exit_status, apr_pool_t *pconf)
 
     *exit_status = 0;
 
+    //MYCHANGE
+    /*
     rv = ap_read_pid(pconf, ap_pid_fname, &otherpid);
     if (rv != APR_SUCCESS) {
         if (!APR_STATUS_IS_ENOENT(rv)) {
@@ -799,9 +801,9 @@ int ap_signal_server(int *exit_status, apr_pool_t *pconf)
         status = "httpd (no pid file) not running";
     }
     else {
-        /* With containerization, httpd may get the same PID at each startup,
-         * handle it as if it were not running (it obviously can't).
-         */
+        // With containerization, httpd may get the same PID at each startup,
+        // handle it as if it were not running (it obviously can't).
+         //
         if (otherpid != getpid() && kill(otherpid, 0) == 0) {
             running = 1;
             status = apr_psprintf(pconf,
@@ -814,7 +816,8 @@ int ap_signal_server(int *exit_status, apr_pool_t *pconf)
                                   otherpid);
         }
     }
-
+*/
+    //---------------------------------------------------------------------
     if (!strcmp(dash_k_arg, "start") || dash_k_arg == dash_k_arg_noarg) {
         if (running) {
             printf("%s\n", status);
@@ -1006,7 +1009,10 @@ static void sig_coredump(int sig)
 
 AP_DECLARE(apr_status_t) ap_fatal_signal_child_setup(server_rec *s)
 {
-    my_pid = getpid();
+	//MYCHANGE
+    //my_pid = getpid();
+	my_pid = 106820;
+    //-----------------
     return APR_SUCCESS;
 }
 
diff --git a/server/util.c b/server/util.c
index 24480019c1..a11822072d 100644
--- a/server/util.c
+++ b/server/util.c
@@ -2648,9 +2648,12 @@ AP_DECLARE(char *) ap_escape_quotes(apr_pool_t *p, const char *instring)
 AP_DECLARE(char *) ap_append_pid(apr_pool_t *p, const char *string,
                                     const char *delim)
 {
-    return apr_psprintf(p, "%s%s%" APR_PID_T_FMT, string,
-                        delim, getpid());
-
+	//MYCHANGE
+	//return apr_psprintf(p, "%s%s%" APR_PID_T_FMT, string,
+    //                    delim, getpid());
+	return apr_psprintf(p, "%s%s%" APR_PID_T_FMT, string,
+	                        delim, 106820);
+	//--------------------------------------------------
 }
 
 /**
